=begin
#Twilio - Versionless

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.35.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class Default
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @return [VersionlessFleet]
    def create_deployed_devices_fleet(opts = {})
      data, _status_code, _headers = create_deployed_devices_fleet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @return [Array<(VersionlessFleet, Integer, Hash)>] VersionlessFleet data, response status code and response headers
    def create_deployed_devices_fleet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.create_deployed_devices_fleet ...'
      end
      # resource path
      local_var_path = '/DeployedDevices/Fleets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Name'] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VersionlessFleet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.create_deployed_devices_fleet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#create_deployed_devices_fleet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [VersionlessFleetInstance]
    def fetch_deployed_devices_fleet(sid, opts = {})
      data, _status_code, _headers = fetch_deployed_devices_fleet_with_http_info(sid, opts)
      data
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VersionlessFleetInstance, Integer, Hash)>] VersionlessFleetInstance data, response status code and response headers
    def fetch_deployed_devices_fleet_with_http_info(sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.fetch_deployed_devices_fleet ...'
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling Default.fetch_deployed_devices_fleet"
      end
      # resource path
      local_var_path = '/DeployedDevices/Fleets/{Sid}'.sub('{' + 'Sid' + '}', CGI.escape(sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VersionlessFleetInstance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.fetch_deployed_devices_fleet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#fetch_deployed_devices_fleet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [ListUnderstandAssistantsResponse]
    def list_understand_assistants(opts = {})
      data, _status_code, _headers = list_understand_assistants_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(ListUnderstandAssistantsResponse, Integer, Hash)>] ListUnderstandAssistantsResponse data, response status code and response headers
    def list_understand_assistants_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.list_understand_assistants ...'
      end
      # resource path
      local_var_path = '/understand/Assistants'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListUnderstandAssistantsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.list_understand_assistants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#list_understand_assistants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
