=begin
#Twilio - Accounts

#This is the public Twilio REST API.

The version of the OpenAPI document: 1.11.0
Contact: support@twilio.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class Default
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param test_string [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :test_boolean 
    # @option opts [Integer] :test_integer 
    # @option opts [Float] :test_number 
    # @option opts [Float] :test_number_float 
    # @option opts [Float] :test_number_double 
    # @option opts [Float] :test_number_int32 
    # @option opts [Integer] :test_number_int64 
    # @option opts [Object] :test_object 
    # @option opts [Time] :test_date_time 
    # @option opts [Date] :test_date 
    # @option opts [TestEnumStatus] :test_enum 
    # @option opts [Array<Object>] :test_object_array 
    # @option opts [Object] :test_any_type 
    # @option opts [Array<Object>] :test_any_array 
    # @option opts [Array<String>] :permissions A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: &#x60;get-all&#x60; and &#x60;post-all&#x60;.
    # @option opts [String] :some_a2_p_thing 
    # @return [TestResponseObject]
    def create_credential_aws(test_string, opts = {})
      data, _status_code, _headers = create_credential_aws_with_http_info(test_string, opts)
      data
    end

    # @param test_string [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :test_boolean 
    # @option opts [Integer] :test_integer 
    # @option opts [Float] :test_number 
    # @option opts [Float] :test_number_float 
    # @option opts [Float] :test_number_double 
    # @option opts [Float] :test_number_int32 
    # @option opts [Integer] :test_number_int64 
    # @option opts [Object] :test_object 
    # @option opts [Time] :test_date_time 
    # @option opts [Date] :test_date 
    # @option opts [TestEnumStatus] :test_enum 
    # @option opts [Array<Object>] :test_object_array 
    # @option opts [Object] :test_any_type 
    # @option opts [Array<Object>] :test_any_array 
    # @option opts [Array<String>] :permissions A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: &#x60;get-all&#x60; and &#x60;post-all&#x60;.
    # @option opts [String] :some_a2_p_thing 
    # @return [Array<(TestResponseObject, Integer, Hash)>] TestResponseObject data, response status code and response headers
    def create_credential_aws_with_http_info(test_string, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.create_credential_aws ...'
      end
      # verify the required parameter 'test_string' is set
      if @api_client.config.client_side_validation && test_string.nil?
        fail ArgumentError, "Missing the required parameter 'test_string' when calling Default.create_credential_aws"
      end
      allowable_values = ["get-all", "post-all"]
      if @api_client.config.client_side_validation && opts[:'permissions'] && !opts[:'permissions'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"permissions\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/Credentials/AWS'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['TestString'] = test_string
      form_params['TestBoolean'] = opts[:'test_boolean'] if !opts[:'test_boolean'].nil?
      form_params['TestInteger'] = opts[:'test_integer'] if !opts[:'test_integer'].nil?
      form_params['TestNumber'] = opts[:'test_number'] if !opts[:'test_number'].nil?
      form_params['TestNumberFloat'] = opts[:'test_number_float'] if !opts[:'test_number_float'].nil?
      form_params['TestNumberDouble'] = opts[:'test_number_double'] if !opts[:'test_number_double'].nil?
      form_params['TestNumberInt32'] = opts[:'test_number_int32'] if !opts[:'test_number_int32'].nil?
      form_params['TestNumberInt64'] = opts[:'test_number_int64'] if !opts[:'test_number_int64'].nil?
      form_params['TestObject'] = opts[:'test_object'] if !opts[:'test_object'].nil?
      form_params['TestDateTime'] = opts[:'test_date_time'] if !opts[:'test_date_time'].nil?
      form_params['TestDate'] = opts[:'test_date'] if !opts[:'test_date'].nil?
      form_params['TestEnum'] = opts[:'test_enum'] if !opts[:'test_enum'].nil?
      form_params['TestObjectArray'] = @api_client.build_collection_param(opts[:'test_object_array'], :csv) if !opts[:'test_object_array'].nil?
      form_params['TestAnyType'] = opts[:'test_any_type'] if !opts[:'test_any_type'].nil?
      form_params['TestAnyArray'] = @api_client.build_collection_param(opts[:'test_any_array'], :csv) if !opts[:'test_any_array'].nil?
      form_params['Permissions'] = @api_client.build_collection_param(opts[:'permissions'], :csv) if !opts[:'permissions'].nil?
      form_params['SomeA2PThing'] = opts[:'some_a2_p_thing'] if !opts[:'some_a2_p_thing'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TestResponseObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.create_credential_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#create_credential_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credential_aws(sid, opts = {})
      delete_credential_aws_with_http_info(sid, opts)
      nil
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_credential_aws_with_http_info(sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.delete_credential_aws ...'
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling Default.delete_credential_aws"
      end
      if @api_client.config.client_side_validation && sid.to_s.length > 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.delete_credential_aws, the character length must be smaller than or equal to 34.'
      end

      if @api_client.config.client_side_validation && sid.to_s.length < 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.delete_credential_aws, the character length must be great than or equal to 34.'
      end

      pattern = Regexp.new(/^CR[0-9a-fA-F]{32}$/)
      if @api_client.config.client_side_validation && sid !~ pattern
        fail ArgumentError, "invalid value for 'sid' when calling Default.delete_credential_aws, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/Credentials/AWS/{Sid}'.sub('{' + 'Sid' + '}', CGI.escape(sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.delete_credential_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#delete_credential_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [TestResponseObject]
    def fetch_credential_aws(sid, opts = {})
      data, _status_code, _headers = fetch_credential_aws_with_http_info(sid, opts)
      data
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestResponseObject, Integer, Hash)>] TestResponseObject data, response status code and response headers
    def fetch_credential_aws_with_http_info(sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.fetch_credential_aws ...'
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling Default.fetch_credential_aws"
      end
      if @api_client.config.client_side_validation && sid.to_s.length > 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.fetch_credential_aws, the character length must be smaller than or equal to 34.'
      end

      if @api_client.config.client_side_validation && sid.to_s.length < 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.fetch_credential_aws, the character length must be great than or equal to 34.'
      end

      pattern = Regexp.new(/^CR[0-9a-fA-F]{32}$/)
      if @api_client.config.client_side_validation && sid !~ pattern
        fail ArgumentError, "invalid value for 'sid' when calling Default.fetch_credential_aws, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/Credentials/AWS/{Sid}'.sub('{' + 'Sid' + '}', CGI.escape(sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TestResponseObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.fetch_credential_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#fetch_credential_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :add_ons_data 
    # @return [TestResponseObject]
    def fetch_credential_history(sid, opts = {})
      data, _status_code, _headers = fetch_credential_history_with_http_info(sid, opts)
      data
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :add_ons_data 
    # @return [Array<(TestResponseObject, Integer, Hash)>] TestResponseObject data, response status code and response headers
    def fetch_credential_history_with_http_info(sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.fetch_credential_history ...'
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling Default.fetch_credential_history"
      end
      if @api_client.config.client_side_validation && sid.to_s.length > 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.fetch_credential_history, the character length must be smaller than or equal to 34.'
      end

      if @api_client.config.client_side_validation && sid.to_s.length < 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.fetch_credential_history, the character length must be great than or equal to 34.'
      end

      pattern = Regexp.new(/^CR[0-9a-fA-F]{32}$/)
      if @api_client.config.client_side_validation && sid !~ pattern
        fail ArgumentError, "invalid value for 'sid' when calling Default.fetch_credential_history, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/Credentials/AWS/{Sid}/History'.sub('{' + 'Sid' + '}', CGI.escape(sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'AddOnsData'] = opts[:'add_ons_data'] if !opts[:'add_ons_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TestResponseObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.fetch_credential_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#fetch_credential_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size 
    # @return [ListCredentialAwsResponse]
    def list_credential_aws(opts = {})
      data, _status_code, _headers = list_credential_aws_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size 
    # @return [Array<(ListCredentialAwsResponse, Integer, Hash)>] ListCredentialAwsResponse data, response status code and response headers
    def list_credential_aws_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.list_credential_aws ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling Default.list_credential_aws, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling Default.list_credential_aws, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v1/Credentials/AWS'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'PageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCredentialAwsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.list_credential_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#list_credential_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateCall200Response]
    def update_call(sid, opts = {})
      data, _status_code, _headers = update_call_with_http_info(sid, opts)
      data
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateCall200Response, Integer, Hash)>] UpdateCall200Response data, response status code and response headers
    def update_call_with_http_info(sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.update_call ...'
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling Default.update_call"
      end
      # resource path
      local_var_path = '/v1/Voice/{Sid}'.sub('{' + 'Sid' + '}', CGI.escape(sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCall200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.update_call",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#update_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :test_string 
    # @option opts [Boolean] :test_boolean 
    # @return [TestResponseObject]
    def update_credential_aws(sid, opts = {})
      data, _status_code, _headers = update_credential_aws_with_http_info(sid, opts)
      data
    end

    # @param sid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :test_string 
    # @option opts [Boolean] :test_boolean 
    # @return [Array<(TestResponseObject, Integer, Hash)>] TestResponseObject data, response status code and response headers
    def update_credential_aws_with_http_info(sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Default.update_credential_aws ...'
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling Default.update_credential_aws"
      end
      if @api_client.config.client_side_validation && sid.to_s.length > 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.update_credential_aws, the character length must be smaller than or equal to 34.'
      end

      if @api_client.config.client_side_validation && sid.to_s.length < 34
        fail ArgumentError, 'invalid value for "sid" when calling Default.update_credential_aws, the character length must be great than or equal to 34.'
      end

      pattern = Regexp.new(/^CR[0-9a-fA-F]{32}$/)
      if @api_client.config.client_side_validation && sid !~ pattern
        fail ArgumentError, "invalid value for 'sid' when calling Default.update_credential_aws, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/Credentials/AWS/{Sid}'.sub('{' + 'Sid' + '}', CGI.escape(sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['TestString'] = opts[:'test_string'] if !opts[:'test_string'].nil?
      form_params['TestBoolean'] = opts[:'test_boolean'] if !opts[:'test_boolean'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TestResponseObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accountSid_authToken']

      new_options = opts.merge(
        :operation => :"Default.update_credential_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Default#update_credential_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
