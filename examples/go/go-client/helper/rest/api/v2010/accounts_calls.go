/*
 * Twilio - Accounts
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.11.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateCall'
type CreateCallParams struct {
	//
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	//
	RequiredStringProperty *string `json:"RequiredStringProperty,omitempty"`
	//
	TestArrayOfStrings *[]string `json:"TestArrayOfStrings,omitempty"`
}

func (params *CreateCallParams) SetPathAccountSid(PathAccountSid string) *CreateCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateCallParams) SetRequiredStringProperty(RequiredStringProperty string) *CreateCallParams {
	params.RequiredStringProperty = &RequiredStringProperty
	return params
}
func (params *CreateCallParams) SetTestArrayOfStrings(TestArrayOfStrings []string) *CreateCallParams {
	params.TestArrayOfStrings = &TestArrayOfStrings
	return params
}

func (c *ApiService) CreateCall(params *CreateCallParams) (*TestResponseObject, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.requestHandler.Client.AccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.RequiredStringProperty != nil {
		data.Set("RequiredStringProperty", *params.RequiredStringProperty)
	}
	if params != nil && params.TestArrayOfStrings != nil {
		for _, item := range *params.TestArrayOfStrings {
			data.Add("TestArrayOfStrings", item)
		}
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TestResponseObject{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'DeleteCall'
type DeleteCallParams struct {
	//
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteCallParams) SetPathAccountSid(PathAccountSid string) *DeleteCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

func (c *ApiService) DeleteCall(TestInteger int, params *DeleteCallParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{TestInteger}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.requestHandler.Client.AccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"TestInteger"+"}", fmt.Sprint(TestInteger), -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Optional parameters for the method 'FetchCall'
type FetchCallParams struct {
	//
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchCallParams) SetPathAccountSid(PathAccountSid string) *FetchCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

func (c *ApiService) FetchCall(TestInteger int, params *FetchCallParams) (*TestResponseObject, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{TestInteger}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.requestHandler.Client.AccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"TestInteger"+"}", fmt.Sprint(TestInteger), -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TestResponseObject{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
