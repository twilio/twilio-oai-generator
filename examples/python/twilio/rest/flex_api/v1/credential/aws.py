"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Accounts
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# from twilio.rest.aws.history import HistoryListInstance


class AwsContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'sid': sid,  }
        self._uri = '/Credentials/AWS/${sid}'
        
        self._history = None
    
    def delete(self):
        
        

        """
        Deletes the AwsInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )
    
    def fetch(self):
        
        """
        Fetch the AwsInstance

        :returns: The fetched AwsInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return AwsInstance(self._version, payload, sid=self._solution['sid'], )
        

        
    
    def update(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return AwsInstance(self._version, payload, sid=self._solution['sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.AwsContext>'



class AwsInstance(InstanceResource):
    def __init__(self, version, payload, sid: str):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'sid' : payload.get('sid'),
            'test_string' : payload.get('test_string'),
            'test_integer' : payload.get('test_integer'),
        }

        self._context = None
        self._solution = {
            'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = AwsContext(
                self._version,
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def history(self):
        return self._proxy.history
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.AwsInstance {}>'.format(context)



class AwsList(ListResource):
    def __init__(self, version: Version):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Credentials/AWS'
        
    

    def page(self, page_size):
        
        data = values.of({
            'page_size': page_size, 
        })

        response = self._version.page(method='get', uri=self._uri, data=data, )

        return AwsPage(self._version, response, self.solution)

    def stream(self, page_size=values.unset, limit=None, pageSize=None):
        limits = self._version.read_limits(limit, page_size)

        page = self.page(page_size=values.unset, limit=None, page_size=None)

        return self._version.stream(page, limits['limit'])


    def list(self, page_size=values.unset, limit=None, pageSize=None):
        return list(self.stream(
            page_size=page_size,
            
            limit=limit,
            page_size=page_size
        ))

    def get_page(self, target_url):
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return AwsPage(self._version, response, self._solution)
    
    

    

    

    # @properties

    def get(self, sid):
        return AwsContext(self._version,  sid, )


    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.AwsListInstance>'



class AwsPage(Page):

    def __init__(self, version, response, solution):
        super().__init__(version, response)

        # Path solution
        self._solution = solution

    def get_instance(self, payload):
        return AwsInstance(self._version, payload, sid=self._solution['sid'])

    def __repr__(self):
        return '<Twilio.Aws.V1.AwsPage'




