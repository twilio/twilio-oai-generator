r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Accounts
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from decimal import Decimal
from typing import List, Optional
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class FeedbackCallSummaryInstance(InstanceResource):
    class Status(object):
        IN_PROGRESS = "in-progress"
        PAUSED = "paused"
        STOPPED = "stopped"
        PROCESSING = "processing"
        COMPLETED = "completed"
        ABSENT = "absent"

    def __init__(self, version, payload, account_sid: str, sid: Optional[str] = None):
        """
        Initialize the FeedbackCallSummaryInstance
        """
        super().__init__(version)

        self._account_sid: Optional[str] = payload.get("account_sid")
        self._sid: Optional[str] = payload.get("sid")
        self._test_string: Optional[str] = payload.get("test_string")
        self._test_integer: Optional[int] = deserialize.integer(
            payload.get("test_integer")
        )
        self._test_object: Optional[str] = payload.get("test_object")
        self._test_date_time: Optional[datetime] = deserialize.rfc2822_datetime(
            payload.get("test_date_time")
        )
        self._test_number: Optional[float] = deserialize.decimal(
            payload.get("test_number")
        )
        self._price_unit: Optional[str] = payload.get("price_unit")
        self._test_number_float: Optional[float] = payload.get("test_number_float")
        self._test_number_decimal: Optional[Decimal] = payload.get(
            "test_number_decimal"
        )
        self._test_enum: Optional["FeedbackCallSummaryInstance.Status"] = payload.get(
            "test_enum"
        )
        self._a2p_profile_bundle_sid: Optional[str] = payload.get(
            "a2p_profile_bundle_sid"
        )
        self._test_array_of_integers: Optional[List[int]] = payload.get(
            "test_array_of_integers"
        )
        self._test_array_of_array_of_integers: Optional[List[List[int]]] = payload.get(
            "test_array_of_array_of_integers"
        )
        self._test_array_of_objects: Optional[List[str]] = payload.get(
            "test_array_of_objects"
        )
        self._test_array_of_enum: Optional[
            List["FeedbackCallSummaryInstance.Status"]
        ] = payload.get("test_array_of_enum")

        self._solution = {
            "account_sid": account_sid,
            "sid": sid or self._sid,
        }
        self._context: Optional[FeedbackCallSummaryContext] = None

    @property
    def _proxy(self) -> "FeedbackCallSummaryContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: FeedbackCallSummaryContext for this FeedbackCallSummaryInstance
        """
        if self._context is None:
            self._context = FeedbackCallSummaryContext(
                self._version,
                account_sid=self._solution["account_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def account_sid(self) -> Optional[str]:
        return self._account_sid

    @property
    def sid(self) -> Optional[str]:
        return self._sid

    @property
    def test_string(self) -> Optional[str]:
        return self._test_string

    @property
    def test_integer(self) -> Optional[int]:
        return self._test_integer

    @property
    def test_object(self) -> Optional[str]:
        return self._test_object

    @property
    def test_date_time(self) -> Optional[datetime]:
        return self._test_date_time

    @property
    def test_number(self) -> Optional[float]:
        return self._test_number

    @property
    def price_unit(self) -> Optional[str]:
        return self._price_unit

    @property
    def test_number_float(self) -> Optional[float]:
        return self._test_number_float

    @property
    def test_number_decimal(self) -> Optional[Decimal]:
        return self._test_number_decimal

    @property
    def test_enum(self) -> Optional["FeedbackCallSummaryInstance.Status"]:
        return self._test_enum

    @property
    def a2p_profile_bundle_sid(self) -> Optional[str]:
        """
        :returns: A2P Messaging Profile Bundle BundleSid
        """
        return self._a2p_profile_bundle_sid

    @property
    def test_array_of_integers(self) -> Optional[List[int]]:
        return self._test_array_of_integers

    @property
    def test_array_of_array_of_integers(self) -> Optional[List[List[int]]]:
        return self._test_array_of_array_of_integers

    @property
    def test_array_of_objects(self) -> Optional[List[str]]:
        return self._test_array_of_objects

    @property
    def test_array_of_enum(
        self,
    ) -> Optional[List["FeedbackCallSummaryInstance.Status"]]:
        """
        :returns: Permissions authorized to the app
        """
        return self._test_array_of_enum

    def update(
        self, end_date, start_date, account_sid=values.unset
    ) -> "FeedbackCallSummaryInstance":
        """
        Update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        return self._proxy.update(
            end_date=end_date,
            start_date=start_date,
            account_sid=account_sid,
        )

    async def update_async(
        self, end_date, start_date, account_sid=values.unset
    ) -> "FeedbackCallSummaryInstance":
        """
        Asynchronous coroutine to update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        return await self._proxy.update_async(
            end_date=end_date,
            start_date=start_date,
            account_sid=account_sid,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.FeedbackCallSummaryInstance {}>".format(context)


class FeedbackCallSummaryContext(InstanceContext):
    def __init__(self, version: Version, account_sid: str, sid: str):
        """
        Initialize the FeedbackCallSummaryContext

        :param version: Version that contains the resource
        :param account_sid:
        :param sid:
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
            "sid": sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/Feedback/Summary/{sid}.json".format(
            **self._solution
        )

    def update(
        self, end_date, start_date, account_sid=values.unset
    ) -> FeedbackCallSummaryInstance:
        """
        Update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        data = values.of(
            {
                "EndDate": serialize.iso8601_date(end_date),
                "StartDate": serialize.iso8601_date(start_date),
                "AccountSid": account_sid,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return FeedbackCallSummaryInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    async def update_async(
        self, end_date, start_date, account_sid=values.unset
    ) -> FeedbackCallSummaryInstance:
        """
        Asynchronous coroutine to update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        data = values.of(
            {
                "EndDate": serialize.iso8601_date(end_date),
                "StartDate": serialize.iso8601_date(start_date),
                "AccountSid": account_sid,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return FeedbackCallSummaryInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.FeedbackCallSummaryContext {}>".format(context)


class FeedbackCallSummaryList(ListResource):
    def __init__(self, version: Version, account_sid: str):
        """
        Initialize the FeedbackCallSummaryList

        :param version: Version that contains the resource
        :param account_sid:

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
        }

    def get(self, sid) -> FeedbackCallSummaryContext:
        """
        Constructs a FeedbackCallSummaryContext

        :param sid:
        """
        return FeedbackCallSummaryContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __call__(self, sid) -> FeedbackCallSummaryContext:
        """
        Constructs a FeedbackCallSummaryContext

        :param sid:
        """
        return FeedbackCallSummaryContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Api.V2010.FeedbackCallSummaryList>"
