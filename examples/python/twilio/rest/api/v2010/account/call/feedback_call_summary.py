r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Accounts
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class FeedbackCallSummaryInstance(InstanceResource):
    class Status(object):
        IN_PROGRESS = "in-progress"
        PAUSED = "paused"
        STOPPED = "stopped"
        PROCESSING = "processing"
        COMPLETED = "completed"
        ABSENT = "absent"

    """
    :ivar account_sid: 
    :ivar sid: 
    :ivar test_string: 
    :ivar test_integer: 
    :ivar test_object: 
    :ivar test_date_time: 
    :ivar test_number: 
    :ivar price_unit: 
    :ivar test_number_float: 
    :ivar test_number_decimal: 
    :ivar test_enum: 
    :ivar a2p_profile_bundle_sid: A2P Messaging Profile Bundle BundleSid
    :ivar test_array_of_integers: 
    :ivar test_array_of_array_of_integers: 
    :ivar test_array_of_objects: 
    :ivar test_array_of_enum: Permissions authorized to the app
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        account_sid: str,
        sid: Optional[str] = None,
    ):
        super().__init__(version)

        self.account_sid: Optional[str] = payload.get("account_sid")
        self.sid: Optional[str] = payload.get("sid")
        self.test_string: Optional[str] = payload.get("test_string")
        self.test_integer: Optional[int] = deserialize.integer(
            payload.get("test_integer")
        )
        self.test_object: Optional[str] = payload.get("test_object")
        self.test_date_time: Optional[datetime] = deserialize.rfc2822_datetime(
            payload.get("test_date_time")
        )
        self.test_number: Optional[float] = deserialize.decimal(
            payload.get("test_number")
        )
        self.price_unit: Optional[str] = payload.get("price_unit")
        self.test_number_float: Optional[float] = payload.get("test_number_float")
        self.test_number_decimal: Optional[Decimal] = payload.get("test_number_decimal")
        self.test_enum: Optional["FeedbackCallSummaryInstance.Status"] = payload.get(
            "test_enum"
        )
        self.a2p_profile_bundle_sid: Optional[str] = payload.get(
            "a2p_profile_bundle_sid"
        )
        self.test_array_of_integers: Optional[List[int]] = payload.get(
            "test_array_of_integers"
        )
        self.test_array_of_array_of_integers: Optional[List[List[int]]] = payload.get(
            "test_array_of_array_of_integers"
        )
        self.test_array_of_objects: Optional[List[str]] = payload.get(
            "test_array_of_objects"
        )
        self.test_array_of_enum: Optional[
            List["FeedbackCallSummaryInstance.Status"]
        ] = payload.get("test_array_of_enum")

        self._solution = {
            "account_sid": account_sid,
            "sid": sid or self.sid,
        }
        self._context: Optional[FeedbackCallSummaryContext] = None

    @property
    def _proxy(self) -> "FeedbackCallSummaryContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: FeedbackCallSummaryContext for this FeedbackCallSummaryInstance
        """
        if self._context is None:
            self._context = FeedbackCallSummaryContext(
                self._version,
                account_sid=self._solution["account_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    def update(
        self, end_date, start_date, account_sid=values.unset
    ) -> "FeedbackCallSummaryInstance":
        """
        Update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        return self._proxy.update(
            end_date=end_date,
            start_date=start_date,
            account_sid=account_sid,
        )

    async def update_async(
        self, end_date, start_date, account_sid=values.unset
    ) -> "FeedbackCallSummaryInstance":
        """
        Asynchronous coroutine to update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        return await self._proxy.update_async(
            end_date=end_date,
            start_date=start_date,
            account_sid=account_sid,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.FeedbackCallSummaryInstance {}>".format(context)


class FeedbackCallSummaryContext(InstanceContext):
    def __init__(self, version: Version, account_sid: str, sid: str):
        """
        Initialize the FeedbackCallSummaryContext

        :param version: Version that contains the resource
        :param account_sid:
        :param sid:
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
            "sid": sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/Feedback/Summary/{sid}.json".format(
            **self._solution
        )

    def update(
        self, end_date, start_date, account_sid=values.unset
    ) -> FeedbackCallSummaryInstance:
        """
        Update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        data = values.of(
            {
                "EndDate": serialize.iso8601_date(end_date),
                "StartDate": serialize.iso8601_date(start_date),
                "AccountSid": account_sid,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return FeedbackCallSummaryInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    async def update_async(
        self, end_date, start_date, account_sid=values.unset
    ) -> FeedbackCallSummaryInstance:
        """
        Asynchronous coroutine to update the FeedbackCallSummaryInstance

        :param date end_date:
        :param date start_date:
        :param str account_sid:

        :returns: The updated FeedbackCallSummaryInstance
        """
        data = values.of(
            {
                "EndDate": serialize.iso8601_date(end_date),
                "StartDate": serialize.iso8601_date(start_date),
                "AccountSid": account_sid,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return FeedbackCallSummaryInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.FeedbackCallSummaryContext {}>".format(context)


class FeedbackCallSummaryList(ListResource):
    def __init__(self, version: Version, account_sid: str):
        """
        Initialize the FeedbackCallSummaryList

        :param version: Version that contains the resource
        :param account_sid:

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
        }

    def get(self, sid) -> FeedbackCallSummaryContext:
        """
        Constructs a FeedbackCallSummaryContext

        :param sid:
        """
        return FeedbackCallSummaryContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __call__(self, sid) -> FeedbackCallSummaryContext:
        """
        Constructs a FeedbackCallSummaryContext

        :param sid:
        """
        return FeedbackCallSummaryContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Api.V2010.FeedbackCallSummaryList>"
