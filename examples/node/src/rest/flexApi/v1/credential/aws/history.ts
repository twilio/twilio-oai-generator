/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../../../V1";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");
import { isValidPathParam } from "../../../../../base/utility";

/**
 * Options to pass to fetch a HistoryInstance
 */
export interface HistoryContextFetchOptions {
  /**  */
  addOnsData?: Record<string, object>;
}

export interface HistoryContext {
  /**
   * Fetch a HistoryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed HistoryInstance
   */
  fetch(
    callback?: (error: Error | null, item?: HistoryInstance) => any,
  ): Promise<HistoryInstance>;
  /**
   * Fetch a HistoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed HistoryInstance
   */
  fetch(
    params: HistoryContextFetchOptions,
    callback?: (error: Error | null, item?: HistoryInstance) => any,
  ): Promise<HistoryInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface HistoryContextSolution {
  sid: string;
}

export class HistoryContextImpl implements HistoryContext {
  protected _solution: HistoryContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V1,
    sid: string,
  ) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Credentials/AWS/${sid}/History`;
  }

  fetch(
    params?:
      | HistoryContextFetchOptions
      | ((error: Error | null, item?: HistoryInstance) => any),
    callback?: (error: Error | null, item?: HistoryInstance) => any,
  ): Promise<HistoryInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["addOnsData"] !== undefined)
      data = {
        ...data,
        ...serialize.prefixedCollapsibleMap(params["addOnsData"], "AddOns"),
      };

    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new HistoryInstance(operationVersion, payload, instance._solution.sid),
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback,
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface HistoryPayload extends HistoryResource {}

interface HistoryResource {
  account_sid: string;
  sid: string;
  test_string: string;
  test_integer: number;
}

export class HistoryInstance {
  protected _solution: HistoryContextSolution;
  protected _context?: HistoryContext;

  constructor(
    protected _version: V1,
    payload: HistoryResource,
    sid: string,
  ) {
    this.accountSid = payload.account_sid;
    this.sid = payload.sid;
    this.testString = payload.test_string;
    this.testInteger = deserialize.integer(payload.test_integer);

    this._solution = { sid };
  }

  accountSid: string;
  sid: string;
  testString: string;
  testInteger: number;

  private get _proxy(): HistoryContext {
    this._context =
      this._context ||
      new HistoryContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a HistoryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed HistoryInstance
   */
  fetch(
    callback?: (error: Error | null, item?: HistoryInstance) => any,
  ): Promise<HistoryInstance>;
  /**
   * Fetch a HistoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed HistoryInstance
   */
  fetch(
    params: HistoryContextFetchOptions,
    callback?: (error: Error | null, item?: HistoryInstance) => any,
  ): Promise<HistoryInstance>;

  fetch(
    params?: any,
    callback?: (error: Error | null, item?: HistoryInstance) => any,
  ): Promise<HistoryInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      sid: this.sid,
      testString: this.testString,
      testInteger: this.testInteger,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface HistorySolution {
  sid: string;
}

export interface HistoryListInstance {
  _version: V1;
  _solution: HistorySolution;
  _uri: string;

  (): HistoryContext;
  get(): HistoryContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function HistoryListInstance(
  version: V1,
  sid: string,
): HistoryListInstance {
  if (!isValidPathParam(sid)) {
    throw new Error("Parameter 'sid' is not valid.");
  }

  const instance = (() => instance.get()) as HistoryListInstance;

  instance.get = function get(): HistoryContext {
    return new HistoryContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = { sid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions,
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
