/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V2010 from "../V2010";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { CallListInstance } from "./account/call";
import { PhoneNumberCapabilities } from "../../../interfaces";
import TwiML from "../../../twiml/TwiML";

export type AccountStatus =
  | "in-progress"
  | "paused"
  | "stopped"
  | "processing"
  | "completed"
  | "absent";

export class TestResponseObjectTestArrayOfObjects {
  "count"?: number;
  "description"?: string;
}

/**
 * Options to pass to update a AccountInstance
 */
export interface AccountContextUpdateOptions {
  /**  */
  status: AccountStatus;
  /**  */
  pauseBehavior?: string;
}

/**
 * Options to pass to create a AccountInstance
 */
export interface AccountListInstanceCreateOptions {
  /**  */
  xTwilioWebhookEnabled?: "true" | "false";
  /**  */
  recordingStatusCallback?: string;
  /**  */
  recordingStatusCallbackEvent?: Array<string>;
  /**  */
  twiml?: TwiML | string;
}
/**
 * Options to pass to each
 */
export interface AccountListInstanceEachOptions {
  /**  */
  dateCreated?: Date;
  /**  */
  "date.test"?: Date;
  /**  */
  dateCreatedBefore?: Date;
  /**  */
  dateCreatedAfter?: Date;
  /**  */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: AccountInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface AccountListInstanceOptions {
  /**  */
  dateCreated?: Date;
  /**  */
  "date.test"?: Date;
  /**  */
  dateCreatedBefore?: Date;
  /**  */
  dateCreatedAfter?: Date;
  /**  */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface AccountListInstancePageOptions {
  /**  */
  dateCreated?: Date;
  /**  */
  "date.test"?: Date;
  /**  */
  dateCreatedBefore?: Date;
  /**  */
  dateCreatedAfter?: Date;
  /**  */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface AccountContext {
  calls: CallListInstance;

  /**
   * Remove a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  fetch(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance>;

  /**
   * Update a AccountInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  update(
    params: AccountContextUpdateOptions,
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface AccountContextSolution {
  sid: string;
}

export class AccountContextImpl implements AccountContext {
  protected _solution: AccountContextSolution;
  protected _uri: string;

  protected _calls?: CallListInstance;

  constructor(protected _version: V2010, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Accounts/${sid}.json`;
  }

  get calls(): CallListInstance {
    this._calls =
      this._calls || CallListInstance(this._version, this._solution.sid);
    return this._calls;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new AccountInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params: AccountContextUpdateOptions,
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["status"] === null || params["status"] === undefined) {
      throw new Error("Required parameter \"params['status']\" missing.");
    }

    let data: any = {};

    if (params["pauseBehavior"] !== undefined)
      data["PauseBehavior"] = params["pauseBehavior"];

    data["Status"] = params["status"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new AccountInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface AccountPayload extends TwilioResponsePayload {
  accounts: AccountResource[];
}

interface AccountResource {
  account_sid: string;
  sid: string;
  test_string: string;
  test_integer: number;
  test_object: PhoneNumberCapabilities;
  test_date_time: Date;
  test_number: number;
  price_unit: string;
  test_number_float: number;
  test_number_decimal: number;
  test_enum: AccountStatus;
  a2p_profile_bundle_sid: string;
  test_array_of_integers: Array<number>;
  test_array_of_array_of_integers: Array<Array<number>>;
  test_array_of_objects: Array<TestResponseObjectTestArrayOfObjects>;
  test_array_of_enum: Array<AccountStatus>;
}

export class AccountInstance {
  protected _solution: AccountContextSolution;
  protected _context?: AccountContext;

  constructor(
    protected _version: V2010,
    payload: AccountResource,
    sid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.sid = payload.sid;
    this.testString = payload.test_string;
    this.testInteger = deserialize.integer(payload.test_integer);
    this.testObject = payload.test_object;
    this.testDateTime = deserialize.rfc2822DateTime(payload.test_date_time);
    this.testNumber = payload.test_number;
    this.priceUnit = payload.price_unit;
    this.testNumberFloat = payload.test_number_float;
    this.testNumberDecimal = deserialize.decimal(payload.test_number_decimal);
    this.testEnum = payload.test_enum;
    this.a2pProfileBundleSid = payload.a2p_profile_bundle_sid;
    this.testArrayOfIntegers = payload.test_array_of_integers;
    this.testArrayOfArrayOfIntegers = payload.test_array_of_array_of_integers;
    this.testArrayOfObjects = payload.test_array_of_objects;
    this.testArrayOfEnum = payload.test_array_of_enum;

    this._solution = { sid: sid || this.sid };
  }

  accountSid: string;
  sid: string;
  testString: string;
  testInteger: number;
  testObject: PhoneNumberCapabilities;
  testDateTime: Date;
  testNumber: number;
  priceUnit: string;
  testNumberFloat: number;
  testNumberDecimal: number;
  testEnum: AccountStatus;
  /**
   * A2P Messaging Profile Bundle BundleSid
   */
  a2pProfileBundleSid: string;
  testArrayOfIntegers: Array<number>;
  testArrayOfArrayOfIntegers: Array<Array<number>>;
  testArrayOfObjects: Array<TestResponseObjectTestArrayOfObjects>;
  /**
   * Permissions authorized to the app
   */
  testArrayOfEnum: Array<AccountStatus>;

  private get _proxy(): AccountContext {
    this._context =
      this._context ||
      new AccountContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Remove a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  fetch(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a AccountInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  update(
    params: AccountContextUpdateOptions,
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Access the calls.
   */
  calls(): CallListInstance {
    return this._proxy.calls;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      sid: this.sid,
      testString: this.testString,
      testInteger: this.testInteger,
      testObject: this.testObject,
      testDateTime: this.testDateTime,
      testNumber: this.testNumber,
      priceUnit: this.priceUnit,
      testNumberFloat: this.testNumberFloat,
      testNumberDecimal: this.testNumberDecimal,
      testEnum: this.testEnum,
      a2pProfileBundleSid: this.a2pProfileBundleSid,
      testArrayOfIntegers: this.testArrayOfIntegers,
      testArrayOfArrayOfIntegers: this.testArrayOfArrayOfIntegers,
      testArrayOfObjects: this.testArrayOfObjects,
      testArrayOfEnum: this.testArrayOfEnum,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface AccountSolution {}

export interface AccountListInstance {
  _version: V2010;
  _solution: AccountSolution;
  _uri: string;

  (sid: string): AccountContext;
  get(sid: string): AccountContext;

  /**
   * Create a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  create(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance>;
  /**
   * Create a AccountInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  create(
    params: AccountListInstanceCreateOptions,
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance>;

  /**
   * Streams AccountInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AccountListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: AccountInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: AccountListInstanceEachOptions,
    callback?: (item: AccountInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of AccountInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage>;
  /**
   * Lists AccountInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AccountListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: AccountInstance[]) => any
  ): Promise<AccountInstance[]>;
  list(
    params: AccountListInstanceOptions,
    callback?: (error: Error | null, items: AccountInstance[]) => any
  ): Promise<AccountInstance[]>;
  /**
   * Retrieve a single page of AccountInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AccountListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage>;
  page(
    params: AccountListInstancePageOptions,
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function AccountListInstance(version: V2010): AccountListInstance {
  const instance = ((sid) => instance.get(sid)) as AccountListInstance;

  instance.get = function get(sid): AccountContext {
    return new AccountContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Accounts.json`;

  instance.create = function create(
    params?:
      | AccountListInstanceCreateOptions
      | ((error: Error | null, items: AccountInstance) => any),
    callback?: (error: Error | null, items: AccountInstance) => any
  ): Promise<AccountInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["recordingStatusCallback"] !== undefined)
      data["RecordingStatusCallback"] = params["recordingStatusCallback"];
    if (params["recordingStatusCallbackEvent"] !== undefined)
      data["RecordingStatusCallbackEvent"] = serialize.map(
        params["recordingStatusCallbackEvent"],
        (e: string) => e
      );
    if (params["twiml"] !== undefined)
      data["Twiml"] = serialize.twiml(params["twiml"]);

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    if (params["xTwilioWebhookEnabled"] !== undefined)
      headers["X-Twilio-Webhook-Enabled"] = params["xTwilioWebhookEnabled"];

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new AccountInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | AccountListInstancePageOptions
      | ((error: Error | null, items: AccountPage) => any),
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["dateCreated"] !== undefined)
      data["DateCreated"] = serialize.iso8601DateTime(params["dateCreated"]);
    if (params["date.test"] !== undefined)
      data["Date.Test"] = serialize.iso8601Date(params["date.test"]);
    if (params["dateCreatedBefore"] !== undefined)
      data["DateCreated<"] = serialize.iso8601DateTime(
        params["dateCreatedBefore"]
      );
    if (params["dateCreatedAfter"] !== undefined)
      data["DateCreated>"] = serialize.iso8601DateTime(
        params["dateCreatedAfter"]
      );
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new AccountPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new AccountPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class AccountPage extends Page<
  V2010,
  AccountPayload,
  AccountResource,
  AccountInstance
> {
  /**
   * Initialize the AccountPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V2010,
    response: Response<string>,
    solution: AccountSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of AccountInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AccountResource): AccountInstance {
    return new AccountInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
