/**
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect } from 'util';


/**
 * Options to pass to create a RecordingInstance
 *
 * @property { 'true' | 'false' } [xTwilioWebhookEnabled] 
 * @property { string } [recordingStatusCallback] 
 * @property { Array<string> } [recordingStatusCallbackEvent] 
 */
export interface RecordingInstanceCreateOptions {
    xTwilioWebhookEnabled?: 'true' | 'false';
    recordingStatusCallback?: string;
    recordingStatusCallbackEvent?: Array<string>;
}
/**
 * Options to pass to page a RecordingInstance
 *
 * @property { Date } [dateCreated] 
 * @property { string } [dateTest] 
 * @property { Date } [dateCreated2] 
 * @property { Date } [dateCreated3] 
 * @property { number } [pageSize] 
 */
export interface RecordingInstancePageOptions {
    dateCreated?: Date;
    dateTest?: string;
    dateCreated2?: Date;
    dateCreated3?: Date;
    pageSize?: number;
}
/**
 * Options to pass to create a RecordingInstance
 *
 * @property { string } status 
 * @property { string } [pauseBehavior] 
 */
export interface RecordingInstanceCreateOptions {
    status: string;
    pauseBehavior?: string;
}

export class RecordingListInstance {
    protected _solution: any;
    protected _uri: string;


    constructor(protected _version: Version, accountSid: string, callSid: string, testInteger: number) {
        this._solution = { accountSid, callSid, testInteger };
        this._uri = `/2010-04-01/Accounts/${accountSid}/Calls/${callSid}/Recordings/${testInteger}.json`;
    }

    /**
     * Create a RecordingInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async create(callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
    /**
     * Create a RecordingInstance
     *
     * @param { RecordingInstanceCreateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async create(params: RecordingInstanceCreateOptions, callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
    public async create(params?: any, callback?: any): Promise<RecordingInstance> {

        if (typeof params === 'function') {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }

        const data: any = {};

        if (params.recordingStatusCallback !== undefined) data['RecordingStatusCallback'] = params.recordingStatusCallback;
        if (params.recordingStatusCallbackEvent !== undefined) data['RecordingStatusCallbackEvent'] = params.recordingStatusCallbackEvent;

        const headers: any = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };

        if (params.xTwilioWebhookEnabled !== undefined) headers['X-Twilio-Webhook-Enabled'] = params.xTwilioWebhookEnabled;

        let promise = this._version.create({ uri: this._uri, method: 'POST', data, headers });

        promise = promise.then(payload => new RecordingInstance(this._version, payload, this._solution.accountSid, this._solution.callSid, this._solution.testInteger));

        if (typeof callback === 'function') {
            promise = promise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return promise;
    }

    /**
     *  a RecordingInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async (callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance> { 


        let promise = this._version.({ uri: this._uri, method: 'DELETE' });

        promise = promise.then(payload => new RecordingInstance(this._version, payload, this._solution.accountSid, this._solution.callSid, this._solution.testInteger));

        if (typeof callback === 'function') {
            promise = promise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return promise;
    }

    /**
     * Page a RecordingInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async page(callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance> { 


        let promise = this._version.page({ uri: this._uri, method: 'GET' });

        promise = promise.then(payload => new RecordingInstance(this._version, payload, this._solution.accountSid, this._solution.callSid, this._solution.testInteger));

        if (typeof callback === 'function') {
            promise = promise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return promise;
    }

    /**
     * Page a RecordingInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async page(callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
    /**
     * Page a RecordingInstance
     *
     * @param { RecordingInstancePageOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async page(params: RecordingInstancePageOptions, callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
    public async page(params?: any, callback?: any): Promise<RecordingInstance> {

        if (typeof params === 'function') {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }

        const data: any = {};


        const headers: any = {
            'Content-Type': 
        };


        let promise = this._version.page({ uri: this._uri, method: 'GET', data, headers });

        promise = promise.then(payload => new RecordingInstance(this._version, payload, this._solution.accountSid, this._solution.callSid, this._solution.testInteger));

        if (typeof callback === 'function') {
            promise = promise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return promise;
    }

    /**
     * Create a RecordingInstance
     *
     * @param { RecordingInstanceCreateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed RecordingInstance
     */
    public async create(params: RecordingInstanceCreateOptions, callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
    public async create(params: any, callback?: any): Promise<RecordingInstance> {

        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }

        if (params.status === null || params.status === undefined) {
            throw new Error('Required parameter "params.status" missing.');
        }

        const data: any = {};

        if (params.pauseBehavior !== undefined) data['PauseBehavior'] = params.pauseBehavior;
        data['Status'] = params.status;

        const headers: any = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };


        let promise = this._version.create({ uri: this._uri, method: 'POST', data, headers });

        promise = promise.then(payload => new RecordingInstance(this._version, payload, this._solution.accountSid, this._solution.callSid, this._solution.testInteger));

        if (typeof callback === 'function') {
            promise = promise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return promise;
    }

    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return this._solution;
    }

    [inspect.custom](depth, options) {
        return inspect(this.toJSON(), options);
    }
}

