/**
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect } from 'util';
import V2010 from '../../../V2010';


/**
 * Options to pass to create a FeedbackSummarInstance
 *
 * @property { string } endDate 
 * @property { string } startDate 
 */
export interface FeedbackSummarInstanceCreateOptions {
    endDate: string;
    startDate: string;
}

export class FeedbackSummarListInstance {
    protected _solution: any;
    protected _uri: string;


    constructor(protected _version: V2010, accountSid: string) {
        this._solution = { accountSid };
        this._uri = `/2010-04-01/Accounts/${accountSid}/Calls/FeedbackSummary.json`;
    }

    /**
     * Create a FeedbackSummarInstance
     *
     * @param { FeedbackSummarInstanceCreateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed FeedbackSummarInstance
     */
    public async create(params: FeedbackSummarInstanceCreateOptions, callback?: (error: Error | null, item?: FeedbackSummarInstance) => any): Promise<FeedbackSummarInstance>;
    public async create(params: any, callback?: any): Promise<FeedbackSummarInstance> {

        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }

        if (params.endDate === null || params.endDate === undefined) {
            throw new Error('Required parameter "params.endDate" missing.');
        }

        if (params.startDate === null || params.startDate === undefined) {
            throw new Error('Required parameter "params.startDate" missing.');
        }

        const data: any = {};

        data['EndDate'] = params.endDate;
        data['StartDate'] = params.startDate;

        const headers: any = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };


        const operationPromise = this._version.create({ uri: this._uri, method: 'POST', data, headers });

        let instancePromise = operationPromise.then(payload => new FeedbackSummarInstance(this._version, payload, this._solution.accountSid));

        if (typeof callback === 'function') {
            instancePromise = instancePromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return instancePromise;
    }

    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return this._solution;
    }

    [inspect.custom](depth, options) {
        return inspect(this.toJSON(), options);
    }
}

