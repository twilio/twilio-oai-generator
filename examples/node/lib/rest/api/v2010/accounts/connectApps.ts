/**
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from 'util';
import Page from '../../../../base/Page';
import V2010 from '../../V2010';


/**
 * Options to pass to page a ConnectAppInstance
 *
 * @property { number } [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
 */
export interface ConnectAppListInstancePageOptions {
    pageSize?: number;
}

/**
 * Options to pass to update a ConnectAppInstance
 *
 * @property { string } [authorizeRedirectUrl] The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.
 * @property { string } [companyName] The company name to set for the Connect App.
 * @property { string } [deauthorizeCallbackMethod] The HTTP method to use when calling &#x60;deauthorize_callback_url&#x60;.
 * @property { string } [deauthorizeCallbackUrl] The URL to call using the &#x60;deauthorize_callback_method&#x60; to de-authorize the Connect App.
 * @property { string } [description] A description of the Connect App.
 * @property { string } [friendlyName] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
 * @property { string } [homepageUrl] A public URL where users can obtain more information about this Connect App.
 * @property { Array<string> } [permissions] A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: &#x60;get-all&#x60; and &#x60;post-all&#x60;.
 */
export interface ConnectAppContextUpdateOptions {
    authorizeRedirectUrl?: string;
    companyName?: string;
    deauthorizeCallbackMethod?: string;
    deauthorizeCallbackUrl?: string;
    description?: string;
    friendlyName?: string;
    homepageUrl?: string;
    permissions?: Array<string>;
}

export interface ConnectAppListInstance {
    (accountSid: string, sid: string): ConnectAppContext;
    get(accountSid: string, sid: string): ConnectAppContext;


    /**
     * Page a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    page(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>;
    /**
     * Page a ConnectAppInstance
     *
     * @param { ConnectAppListInstancePageOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    page(params: ConnectAppListInstancePageOptions, callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>;
    page(params?: any, callback?: any): Promise<ConnectAppInstance>
;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}


interface ConnectAppListInstanceImpl extends ConnectAppListInstance {}
class ConnectAppListInstanceImpl implements ConnectAppListInstance {
    _version?: V2010;
    _solution?: any;
    _uri?: string;

}

export function ConnectAppListInstance(version: V2010, accountSid: string): ConnectAppListInstance {
    const instance = ((accountSid, sid) => instance.get(accountSid, sid)) as ConnectAppListInstanceImpl;

    instance.get = function get(accountSid, sid): ConnectAppContext {
        return new ConnectAppContextImpl(version, accountSid, sid);
    }

    instance._version = version;
    instance._solution = { accountSid };
    instance._uri = `/2010-04-01/Accounts/${accountSid}/ConnectApps.json`;

    instance.page = function page(params?: any, callback?: any): Promise<ConnectAppInstance> {
        if (typeof params === 'function') {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }

        const data: any = {};

        if (params.pageSize !== undefined) data['PageSize'] = params.pageSize;

        const headers: any = {};


        let operationVersion = version,
            operationPromise = operationVersion.page({ uri: this._uri, method: 'GET', data, headers });

        operationPromise = operationPromise.then(payload => new ConnectAppInstance(operationVersion, payload, this._solution.accountSid));

        if (typeof callback === 'function') {
            operationPromise = operationPromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return operationPromise;

    }

    instance.toJSON = function toJSON() {
        return this._solution;
    }

    instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
        return inspect(this.toJSON(), options);
    }

    return instance;
}


export interface ConnectAppContext {


    /**
     * Remove a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed boolean
     */
    remove(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<boolean>
;
    /**
     * Fetch a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    fetch(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>
;
    /**
     * Update a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    update(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>;
    /**
     * Update a ConnectAppInstance
     *
     * @param { ConnectAppContextUpdateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    update(params: ConnectAppContextUpdateOptions, callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>;
    update(params?: any, callback?: any): Promise<ConnectAppInstance>
;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}

export class ConnectAppContextImpl implements ConnectAppContext {
    protected _solution: any;
    protected _uri: string;


    constructor(protected _version: V2010, accountSid: string, sid: string) {
        this._solution = { accountSid, sid };
        this._uri = `/2010-04-01/Accounts/${accountSid}/ConnectApps/${sid}.json`;
    }

    remove(callback?: any): Promise<boolean> {

        let operationVersion = this._version,
            operationPromise = operationVersion.remove({ uri: this._uri, method: 'DELETE' });


        if (typeof callback === 'function') {
            operationPromise = operationPromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return operationPromise;

    }

    fetch(callback?: any): Promise<ConnectAppInstance> {

        let operationVersion = this._version,
            operationPromise = operationVersion.fetch({ uri: this._uri, method: 'GET' });

        operationPromise = operationPromise.then(payload => new ConnectAppInstance(operationVersion, payload, this._solution.accountSid, this._solution.sid));

        if (typeof callback === 'function') {
            operationPromise = operationPromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return operationPromise;

    }

    update(params?: any, callback?: any): Promise<ConnectAppInstance> {
        if (typeof params === 'function') {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }

        const data: any = {};

        if (params.authorizeRedirectUrl !== undefined) data['AuthorizeRedirectUrl'] = params.authorizeRedirectUrl;
        if (params.companyName !== undefined) data['CompanyName'] = params.companyName;
        if (params.deauthorizeCallbackMethod !== undefined) data['DeauthorizeCallbackMethod'] = params.deauthorizeCallbackMethod;
        if (params.deauthorizeCallbackUrl !== undefined) data['DeauthorizeCallbackUrl'] = params.deauthorizeCallbackUrl;
        if (params.description !== undefined) data['Description'] = params.description;
        if (params.friendlyName !== undefined) data['FriendlyName'] = params.friendlyName;
        if (params.homepageUrl !== undefined) data['HomepageUrl'] = params.homepageUrl;
        if (params.permissions !== undefined) data['Permissions'] = params.permissions;

        const headers: any = {};
        headers['Content-Type'] = 'application/x-www-form-urlencoded'


        let operationVersion = this._version,
            operationPromise = operationVersion.update({ uri: this._uri, method: 'POST', data, headers });

        operationPromise = operationPromise.then(payload => new ConnectAppInstance(operationVersion, payload, this._solution.accountSid, this._solution.sid));

        if (typeof callback === 'function') {
            operationPromise = operationPromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return operationPromise;

    }

    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return this._solution;
    }

    [inspect.custom](_depth: any, options: InspectOptions) {
        return inspect(this.toJSON(), options);
    }
}

export type ConnectAppDeauthorizeCallbackMethod = 'HEAD'|'GET'|'POST'|'PATCH'|'PUT'|'DELETE';
export type ConnectAppPermissions = 'get-all'|'post-all';

interface ConnectAppPayload extends ConnectAppResource, Page.TwilioResponsePayload {
}

interface ConnectAppResource {
    account_sid?: string | null;
    authorize_redirect_url?: string | null;
    company_name?: string | null;
    deauthorize_callback_method?: ConnectAppDeauthorizeCallbackMethod;
    deauthorize_callback_url?: string | null;
    description?: string | null;
    friendly_name?: string | null;
    homepage_url?: string | null;
    permissions?: ConnectAppPermissions;
    sid?: string | null;
    uri?: string | null;
}

export class ConnectAppInstance {
    protected _solution: any;
    protected _context?: ConnectAppContext;

    constructor(protected _version: V2010, payload: ConnectAppPayload, accountSid: string, sid?: string) {
        this.accountSid = payload.account_sid;
        this.authorizeRedirectUrl = payload.authorize_redirect_url;
        this.companyName = payload.company_name;
        this.deauthorizeCallbackMethod = payload.deauthorize_callback_method;
        this.deauthorizeCallbackUrl = payload.deauthorize_callback_url;
        this.description = payload.description;
        this.friendlyName = payload.friendly_name;
        this.homepageUrl = payload.homepage_url;
        this.permissions = payload.permissions;
        this.sid = payload.sid;
        this.uri = payload.uri;

        this._solution = { accountSid, sid: sid || this.sid };
    }

    private get _proxy(): ConnectAppContext {
        this._context = this._context || new ConnectAppContextImpl(this._version, this._solution.accountSid, this._solution.sid);
        return this._context;
    }

    /**
     * The SID of the Account that created the resource
     */
    accountSid?: string | null;
    /**
     * The URL to redirect the user to after authorization
     */
    authorizeRedirectUrl?: string | null;
    /**
     * The company name set for the Connect App
     */
    companyName?: string | null;
    /**
     * The HTTP method we use to call deauthorize_callback_url
     */
    deauthorizeCallbackMethod?: ConnectAppDeauthorizeCallbackMethod;
    /**
     * The URL we call to de-authorize the Connect App
     */
    deauthorizeCallbackUrl?: string | null;
    /**
     * The description of the Connect App
     */
    description?: string | null;
    /**
     * The string that you assigned to describe the resource
     */
    friendlyName?: string | null;
    /**
     * The URL users can obtain more information
     */
    homepageUrl?: string | null;
    /**
     * The set of permissions that your ConnectApp requests
     */
    permissions?: ConnectAppPermissions;
    /**
     * The unique string that identifies the resource
     */
    sid?: string | null;
    /**
     * The URI of the resource, relative to `https://api.twilio.com`
     */
    uri?: string | null;

    /**
     * Remove a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed boolean
     */
    remove(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<boolean>
 {
        return this._proxy.remove(callback);
    }

    /**
     * Fetch a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    fetch(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>
 {
        return this._proxy.fetch(callback);
    }

    /**
     * Update a ConnectAppInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    update(callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>;
    /**
     * Update a ConnectAppInstance
     *
     * @param { ConnectAppContextUpdateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConnectAppInstance
     */
    update(params: ConnectAppContextUpdateOptions, callback?: (error: Error | null, item?: ConnectAppInstance) => any): Promise<ConnectAppInstance>;
    update(params?: any, callback?: any): Promise<ConnectAppInstance>
 {
        return this._proxy.update(params, callback);
    }

    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return {
            accountSid: this.accountSid, 
            authorizeRedirectUrl: this.authorizeRedirectUrl, 
            companyName: this.companyName, 
            deauthorizeCallbackMethod: this.deauthorizeCallbackMethod, 
            deauthorizeCallbackUrl: this.deauthorizeCallbackUrl, 
            description: this.description, 
            friendlyName: this.friendlyName, 
            homepageUrl: this.homepageUrl, 
            permissions: this.permissions, 
            sid: this.sid, 
            uri: this.uri
        }
    }

    [inspect.custom](_depth: any, options: InspectOptions) {
        return inspect(this.toJSON(), options);
    }
}

