/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from 'util';
import Page from '../../../../../base/Page';
import V2010 from '../../../V2010';


/**
 * Options to pass to create a FeedbackSummaryInstance
 *
 * @property { string } endDate 
 * @property { string } startDate 
 */
export interface FeedbackSummaryListInstanceCreateOptions {
    endDate: string;
    startDate: string;
}

export interface FeedbackSummaryListInstance {


    /**
     * Create a FeedbackSummaryInstance
     *
     * @param { FeedbackSummaryListInstanceCreateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed FeedbackSummaryInstance
     */
    create(params: FeedbackSummaryListInstanceCreateOptions, callback?: (error: Error | null, item?: FeedbackSummaryInstance) => any): Promise<FeedbackSummaryInstance>;
    create(params: any, callback?: any): Promise<FeedbackSummaryInstance>
;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}


interface FeedbackSummaryListInstanceImpl extends FeedbackSummaryListInstance {}
class FeedbackSummaryListInstanceImpl implements FeedbackSummaryListInstance {
    _version?: V2010;
    _solution?: any;
    _uri?: string;

}

export function FeedbackSummaryListInstance(version: V2010, accountSid: string): FeedbackSummaryListInstance {
    const instance = {} as FeedbackSummaryListInstanceImpl;

    instance._version = version;
    instance._solution = { accountSid };
    instance._uri = `/2010-04-01/Accounts/${accountSid}/Calls/FeedbackSummary.json`;

    instance.create = function create(params: any, callback?: any): Promise<FeedbackSummaryInstance> {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }

        if (params.endDate === null || params.endDate === undefined) {
            throw new Error('Required parameter "params.endDate" missing.');
        }

        if (params.startDate === null || params.startDate === undefined) {
            throw new Error('Required parameter "params.startDate" missing.');
        }

        const data: any = {};

        data['EndDate'] = params.endDate;
        data['StartDate'] = params.startDate;

        const headers: any = {};
        headers['Content-Type'] = 'application/x-www-form-urlencoded'


        let operationVersion = version,
            operationPromise = operationVersion.create({ uri: this._uri, method: 'POST', data, headers });

        operationPromise = operationPromise.then(payload => new FeedbackSummaryInstance(operationVersion, payload, this._solution.accountSid));

        if (typeof callback === 'function') {
            operationPromise = operationPromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return operationPromise;

    }

    instance.toJSON = function toJSON() {
        return this._solution;
    }

    instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
        return inspect(this.toJSON(), options);
    }

    return instance;
}

