/*
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.api.v2010;

import com.twilio.base.Creator;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.time.LocalDate;
import com.twilio.converter.Converter;
import java.time.ZonedDateTime;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.format.DateTimeFormatter;
import com.twilio.converter.DateConverter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import lombok.ToString;


import java.net.URI;

/*
    * Twilio - Accounts
    *
    * This is the public Twilio REST API.
    *
    * API version: 1.11.0
    * Contact: support@twilio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


public class FlexFlowCreator extends Creator<FlexFlow>{
    private String channelType;
    private String chatServiceSid;
    private String friendlyName;
    private String contactIdentity;
    private Boolean enabled;
    private String integrationChannel;
    private Boolean integrationCreationOnMessage;
    private String integrationFlowSid;
    private Integer integrationPriority;
    private Integer integrationRetryCount;
    private Integer integrationTimeout;
    private URI integrationUrl;
    private String integrationWorkflowSid;
    private String integrationWorkspaceSid;
    private String integrationType;
    private Boolean janitorEnabled;
    private Boolean longLived;

    public FlexFlowCreator(final String channelType, final String chatServiceSid, final String friendlyName) {
        this.channelType = channelType;
        this.chatServiceSid = chatServiceSid;
        this.friendlyName = friendlyName;
    }

    public FlexFlowCreator setChannelType(final String channelType){
        this.channelType = channelType;
        return this;
    }
    public FlexFlowCreator setChatServiceSid(final String chatServiceSid){
        this.chatServiceSid = chatServiceSid;
        return this;
    }
    public FlexFlowCreator setFriendlyName(final String friendlyName){
        this.friendlyName = friendlyName;
        return this;
    }
    public FlexFlowCreator setContactIdentity(final String contactIdentity){
        this.contactIdentity = contactIdentity;
        return this;
    }
    public FlexFlowCreator setEnabled(final Boolean enabled){
        this.enabled = enabled;
        return this;
    }
    public FlexFlowCreator setIntegrationChannel(final String integrationChannel){
        this.integrationChannel = integrationChannel;
        return this;
    }
    public FlexFlowCreator setIntegrationCreationOnMessage(final Boolean integrationCreationOnMessage){
        this.integrationCreationOnMessage = integrationCreationOnMessage;
        return this;
    }
    public FlexFlowCreator setIntegrationFlowSid(final String integrationFlowSid){
        this.integrationFlowSid = integrationFlowSid;
        return this;
    }
    public FlexFlowCreator setIntegrationPriority(final Integer integrationPriority){
        this.integrationPriority = integrationPriority;
        return this;
    }
    public FlexFlowCreator setIntegrationRetryCount(final Integer integrationRetryCount){
        this.integrationRetryCount = integrationRetryCount;
        return this;
    }
    public FlexFlowCreator setIntegrationTimeout(final Integer integrationTimeout){
        this.integrationTimeout = integrationTimeout;
        return this;
    }
    public FlexFlowCreator setIntegrationUrl(final URI integrationUrl){
        this.integrationUrl = integrationUrl;
        return this;
    }
    public FlexFlowCreator setIntegrationWorkflowSid(final String integrationWorkflowSid){
        this.integrationWorkflowSid = integrationWorkflowSid;
        return this;
    }
    public FlexFlowCreator setIntegrationWorkspaceSid(final String integrationWorkspaceSid){
        this.integrationWorkspaceSid = integrationWorkspaceSid;
        return this;
    }
    public FlexFlowCreator setIntegrationType(final String integrationType){
        this.integrationType = integrationType;
        return this;
    }
    public FlexFlowCreator setJanitorEnabled(final Boolean janitorEnabled){
        this.janitorEnabled = janitorEnabled;
        return this;
    }
    public FlexFlowCreator setLongLived(final Boolean longLived){
        this.longLived = longLived;
        return this;
    }

    @Override
    public FlexFlow create(final TwilioRestClient client){
        String path = "/2010-04-01/v1/FlexFlows";
        path = path.replace("{"+"ChannelType"+"}", this.channelType.toString());
        path = path.replace("{"+"ChatServiceSid"+"}", this.chatServiceSid.toString());
        path = path.replace("{"+"FriendlyName"+"}", this.friendlyName.toString());

        Request request = new Request(
            HttpMethod.POST,
            Domains.API.toString(),
            path
        );
        addPostParams(request);
        Response response = client.request(request);
        if (response == null) {
            throw new ApiConnectionException("FlexFlow creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return FlexFlow.fromJson(response.getStream(), client.getObjectMapper());
    }
    private void addPostParams(final Request request) {
        if (channelType != null) {
            request.addPostParam("ChannelType", channelType);
    
        }
        if (chatServiceSid != null) {
            request.addPostParam("ChatServiceSid", chatServiceSid);
    
        }
        if (contactIdentity != null) {
            request.addPostParam("ContactIdentity", contactIdentity);
    
        }
        if (enabled != null) {
            request.addPostParam("Enabled", enabled.toString());
    
        }
        if (friendlyName != null) {
            request.addPostParam("FriendlyName", friendlyName);
    
        }
        if (integrationChannel != null) {
            request.addPostParam("Integration.Channel", integrationChannel);
    
        }
        if (integrationCreationOnMessage != null) {
            request.addPostParam("Integration.CreationOnMessage", integrationCreationOnMessage.toString());
    
        }
        if (integrationFlowSid != null) {
            request.addPostParam("Integration.FlowSid", integrationFlowSid);
    
        }
        if (integrationPriority != null) {
            request.addPostParam("Integration.Priority", integrationPriority.toString());
    
        }
        if (integrationRetryCount != null) {
            request.addPostParam("Integration.RetryCount", integrationRetryCount.toString());
    
        }
        if (integrationTimeout != null) {
            request.addPostParam("Integration.Timeout", integrationTimeout.toString());
    
        }
        if (integrationUrl != null) {
            request.addPostParam("Integration.Url", integrationUrl.toString());
    
        }
        if (integrationWorkflowSid != null) {
            request.addPostParam("Integration.WorkflowSid", integrationWorkflowSid);
    
        }
        if (integrationWorkspaceSid != null) {
            request.addPostParam("Integration.WorkspaceSid", integrationWorkspaceSid);
    
        }
        if (integrationType != null) {
            request.addPostParam("IntegrationType", integrationType);
    
        }
        if (janitorEnabled != null) {
            request.addPostParam("JanitorEnabled", janitorEnabled.toString());
    
        }
        if (longLived != null) {
            request.addPostParam("LongLived", longLived.toString());
    
        }
    }
}
