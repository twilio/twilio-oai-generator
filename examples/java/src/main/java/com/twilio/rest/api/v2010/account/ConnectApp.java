/*
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.api.v2010.account;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import java.util.Currency;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.converter.PrefixedCollapsibleMap;
import com.twilio.converter.CurrencyDeserializer;
import com.twilio.exception.ApiConnectionException;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;


import java.util.Map;
import java.time.LocalDate;
import java.math.BigDecimal;
import com.twilio.type.PhoneNumberCapabilities;
import com.twilio.type.FeedbackIssue;
import com.twilio.type.IceServer;
import com.twilio.type.InboundCallPrice;
import com.twilio.type.OutboundPrefixPriceWithOrigin;
import com.twilio.type.OutboundPrefixPrice;
import com.twilio.type.OutboundCallPriceWithOrigin;
import com.twilio.type.PhoneNumberPrice;
import com.twilio.type.InboundSmsPrice;
import com.twilio.type.OutboundSmsPrice;
import com.twilio.type.OutboundCallPrice;
import com.twilio.type.RecordingRule;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class ConnectApp extends Resource {
    private static final long serialVersionUID = 208507077582989L;


    public static ConnectAppFetcher fetcher(final String sid){
        return new ConnectAppFetcher(sid);
    }
    public static ConnectAppFetcher fetcher(final String accountSid, final String sid){
        return new ConnectAppFetcher(accountSid, sid);
    }

    public static ConnectAppDeleter deleter(final String sid){
        return new ConnectAppDeleter(sid);
    }
    public static ConnectAppDeleter deleter(final String accountSid, final String sid){
        return new ConnectAppDeleter(accountSid, sid);
    }


    public static ConnectAppUpdater updater(final String sid){
        return new ConnectAppUpdater(sid);
    }
    public static ConnectAppUpdater updater(final String accountSid, final String sid){
        return new ConnectAppUpdater(accountSid, sid);
    }

    /**
    * Converts a JSON String into a ConnectApp object using the provided ObjectMapper.
    *
    * @param json Raw JSON String
    * @param objectMapper Jackson ObjectMapper
    * @return ConnectApp object represented by the provided JSON
    */
    public static ConnectApp fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ConnectApp.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
    * Converts a JSON InputStream into a ConnectApp object using the provided
    * ObjectMapper.
    *
    * @param json Raw JSON InputStream
    * @param objectMapper Jackson ObjectMapper
    * @return ConnectApp object represented by the provided JSON
    */
    public static ConnectApp fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ConnectApp.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }
    public enum Permissions {
        GET_ALL("get-all"),
        POST_ALL("post-all");

        private final String value;

        private Permissions(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static Permissions forValue(final String value) {
            return Promoter.enumFromString(value, Permissions.values());
        }
    }

    private final String accountSid;
    private final URI authorizeRedirectUrl;
    private final String companyName;
    private final HttpMethod deauthorizeCallbackMethod;
    private final URI deauthorizeCallbackUrl;
    private final String description;
    private final String friendlyName;
    private final URI homepageUrl;
    private final List<String> permissions;
    private final String sid;
    private final URI uri;

    @JsonCreator
    private ConnectApp(
        @JsonProperty("account_sid")
        final String accountSid,

        @JsonProperty("authorize_redirect_url")
        final URI authorizeRedirectUrl,

        @JsonProperty("company_name")
        final String companyName,

        @JsonProperty("deauthorize_callback_method")
        final HttpMethod deauthorizeCallbackMethod,

        @JsonProperty("deauthorize_callback_url")
        final URI deauthorizeCallbackUrl,

        @JsonProperty("description")
        final String description,

        @JsonProperty("friendly_name")
        final String friendlyName,

        @JsonProperty("homepage_url")
        final URI homepageUrl,

        @JsonProperty("permissions")
        final List<String> permissions,

        @JsonProperty("sid")
        final String sid,

        @JsonProperty("uri")
        final URI uri
    ) {
        this.accountSid = accountSid;
        this.authorizeRedirectUrl = authorizeRedirectUrl;
        this.companyName = companyName;
        this.deauthorizeCallbackMethod = deauthorizeCallbackMethod;
        this.deauthorizeCallbackUrl = deauthorizeCallbackUrl;
        this.description = description;
        this.friendlyName = friendlyName;
        this.homepageUrl = homepageUrl;
        this.permissions = permissions;
        this.sid = sid;
        this.uri = uri;
    }

        public final String getAccountSid() {
            return this.accountSid;
        }
        public final URI getAuthorizeRedirectUrl() {
            return this.authorizeRedirectUrl;
        }
        public final String getCompanyName() {
            return this.companyName;
        }
        public final HttpMethod getDeauthorizeCallbackMethod() {
            return this.deauthorizeCallbackMethod;
        }
        public final URI getDeauthorizeCallbackUrl() {
            return this.deauthorizeCallbackUrl;
        }
        public final String getDescription() {
            return this.description;
        }
        public final String getFriendlyName() {
            return this.friendlyName;
        }
        public final URI getHomepageUrl() {
            return this.homepageUrl;
        }
        public final List<String> getPermissions() {
            return this.permissions;
        }
        public final String getSid() {
            return this.sid;
        }
        public final URI getUri() {
            return this.uri;
        }

    @Override
    public boolean equals(final Object o) {
        if (this==o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ConnectApp other = (ConnectApp) o;

        return Objects.equals(accountSid, other.accountSid) &&  Objects.equals(authorizeRedirectUrl, other.authorizeRedirectUrl) &&  Objects.equals(companyName, other.companyName) &&  Objects.equals(deauthorizeCallbackMethod, other.deauthorizeCallbackMethod) &&  Objects.equals(deauthorizeCallbackUrl, other.deauthorizeCallbackUrl) &&  Objects.equals(description, other.description) &&  Objects.equals(friendlyName, other.friendlyName) &&  Objects.equals(homepageUrl, other.homepageUrl) &&  Objects.equals(permissions, other.permissions) &&  Objects.equals(sid, other.sid) &&  Objects.equals(uri, other.uri)  ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountSid, authorizeRedirectUrl, companyName, deauthorizeCallbackMethod, deauthorizeCallbackUrl, description, friendlyName, homepageUrl, permissions, sid, uri);
    }

}

