/*
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.api.v2010;

import com.twilio.base.Creator;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.time.LocalDate;
import com.twilio.converter.Converter;
import java.time.ZonedDateTime;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.format.DateTimeFormatter;
import com.twilio.converter.DateConverter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import lombok.ToString;


import java.net.URI;

/*
    * Twilio - Accounts
    *
    * This is the public Twilio REST API.
    *
    * API version: 1.11.0
    * Contact: support@twilio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


public class AwsCreator extends Creator<Aws>{
    private String testString;
    private Boolean testBoolean;
    private Integer testInteger;
    private BigDecimal testNumber;
    private Float testNumberFloat;
    private Double testNumberDouble;
    private BigDecimal testNumberInt32;
    private Long testNumberInt64;
    private Map<String, Object> testObject;
    private ZonedDateTime testDateTime;
    private LocalDate testDate;
    private String testEnum;
    private List<Object> testObjectArray;
    private Map<String, Object> testAnyType;

    public AwsCreator(final String testString) {
        this.testString = testString;
    }

    public AwsCreator setTestString(final String testString){
        this.testString = testString;
        return this;
    }
    public AwsCreator setTestBoolean(final Boolean testBoolean){
        this.testBoolean = testBoolean;
        return this;
    }
    public AwsCreator setTestInteger(final Integer testInteger){
        this.testInteger = testInteger;
        return this;
    }
    public AwsCreator setTestNumber(final BigDecimal testNumber){
        this.testNumber = testNumber;
        return this;
    }
    public AwsCreator setTestNumberFloat(final Float testNumberFloat){
        this.testNumberFloat = testNumberFloat;
        return this;
    }
    public AwsCreator setTestNumberDouble(final Double testNumberDouble){
        this.testNumberDouble = testNumberDouble;
        return this;
    }
    public AwsCreator setTestNumberInt32(final BigDecimal testNumberInt32){
        this.testNumberInt32 = testNumberInt32;
        return this;
    }
    public AwsCreator setTestNumberInt64(final Long testNumberInt64){
        this.testNumberInt64 = testNumberInt64;
        return this;
    }
    public AwsCreator setTestObject(final Map<String, Object> testObject){
        this.testObject = testObject;
        return this;
    }
    public AwsCreator setTestDateTime(final ZonedDateTime testDateTime){
        this.testDateTime = testDateTime;
        return this;
    }
    public AwsCreator setTestDate(final LocalDate testDate){
        this.testDate = testDate;
        return this;
    }
    public AwsCreator setTestEnum(final String testEnum){
        this.testEnum = testEnum;
        return this;
    }
    public AwsCreator setTestObjectArray(final List<Object> testObjectArray){
        this.testObjectArray = testObjectArray;
        return this;
    }
    public AwsCreator setTestAnyType(final Map<String, Object> testAnyType){
        this.testAnyType = testAnyType;
        return this;
    }

    @Override
    public Aws create(final TwilioRestClient client){
        String path = "/v1/Credentials/AWS";
        path = path.replace("{"+"TestString"+"}", this.testString.toString());

        Request request = new Request(
            HttpMethod.POST,
            Domains.API.toString(),
            path
        );
        addPostParams(request);
        Response response = client.request(request);
        if (response == null) {
            throw new ApiConnectionException("Aws creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return Aws.fromJson(response.getStream(), client.getObjectMapper());
    }
    private void addPostParams(final Request request) {
        if (testString != null) {
            request.addPostParam("TestString", testString);
    
        }
        if (testBoolean != null) {
            request.addPostParam("TestBoolean", testBoolean.toString());
    
        }
        if (testInteger != null) {
            request.addPostParam("TestInteger", testInteger.toString());
    
        }
        if (testNumber != null) {
            request.addPostParam("TestNumber", testNumber.toString());
    
        }
        if (testNumberFloat != null) {
            request.addPostParam("TestNumberFloat", testNumberFloat.toString());
    
        }
        if (testNumberDouble != null) {
            request.addPostParam("TestNumberDouble", testNumberDouble.toString());
    
        }
        if (testNumberInt32 != null) {
            request.addPostParam("TestNumberInt32", testNumberInt32.toString());
    
        }
        if (testNumberInt64 != null) {
            request.addPostParam("TestNumberInt64", testNumberInt64.toString());
    
        }
        if (testObject != null) {
            request.addPostParam("TestObject",  Converter.mapToJson(testObject));
    
        }
        if (testDateTime != null) {
            request.addPostParam("TestDateTime", testDateTime.toInstant().toString());

        }
        if (testDate != null) {
            request.addPostParam("TestDate", DateConverter.dateStringFromLocalDate(testDate));

        }
        if (testEnum != null) {
            request.addPostParam("TestEnum", testEnum);
    
        }
        if (testObjectArray != null) {
            for (Object prop : testObjectArray) {
                request.addPostParam("TestObjectArray", prop.toString());
            }
    
        }
        if (testAnyType != null) {
            request.addPostParam("TestAnyType", testAnyType.toString());
    
        }
    }
}
