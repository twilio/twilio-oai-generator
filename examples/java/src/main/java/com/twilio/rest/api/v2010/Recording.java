/*
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.api.v2010;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import java.util.Currency;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.converter.PrefixedCollapsibleMap;
import com.twilio.converter.CurrencyDeserializer;
import com.twilio.exception.ApiConnectionException;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;


import java.util.Map;
import java.time.LocalDate;
import java.math.BigDecimal;
import com.twilio.type.PhoneNumberCapabilities;
import com.twilio.type.FeedbackIssue;
import com.twilio.type.IceServer;
import com.twilio.type.InboundCallPrice;
import com.twilio.type.OutboundPrefixPriceWithOrigin;
import com.twilio.type.OutboundPrefixPrice;
import com.twilio.type.OutboundCallPriceWithOrigin;
import com.twilio.type.PhoneNumberPrice;
import com.twilio.type.InboundSmsPrice;
import com.twilio.type.OutboundSmsPrice;
import com.twilio.type.OutboundCallPrice;
import com.twilio.type.RecordingRule;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Recording extends Resource {
    private static final long serialVersionUID = 194216998635095L;


    public static RecordingFetcher fetcher(final String conferenceSid, final String sid){
        return new RecordingFetcher(conferenceSid, sid);
    }
    public static RecordingFetcher fetcher(final String accountSid, final String conferenceSid, final String sid){
        return new RecordingFetcher(accountSid, conferenceSid, sid);
    }

    public static RecordingDeleter deleter(final String conferenceSid, final String sid){
        return new RecordingDeleter(conferenceSid, sid);
    }
    public static RecordingDeleter deleter(final String accountSid, final String conferenceSid, final String sid){
        return new RecordingDeleter(accountSid, conferenceSid, sid);
    }

    public static RecordingReader reader(final String conferenceSid){
        return new RecordingReader(conferenceSid);
    }
    public static RecordingReader reader(final String accountSid, final String conferenceSid){
        return new RecordingReader(accountSid, conferenceSid);
    }

    public static RecordingUpdater updater(final String conferenceSid, final String sid, final Recording.Status status){
        return new RecordingUpdater(conferenceSid, sid, status);
    }
    public static RecordingUpdater updater(final String accountSid, final String conferenceSid, final String sid, final Recording.Status status){
        return new RecordingUpdater(accountSid, conferenceSid, sid, status);
    }

    /**
    * Converts a JSON String into a Recording object using the provided ObjectMapper.
    *
    * @param json Raw JSON String
    * @param objectMapper Jackson ObjectMapper
    * @return Recording object represented by the provided JSON
    */
    public static Recording fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Recording.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
    * Converts a JSON InputStream into a Recording object using the provided
    * ObjectMapper.
    *
    * @param json Raw JSON InputStream
    * @param objectMapper Jackson ObjectMapper
    * @return Recording object represented by the provided JSON
    */
    public static Recording fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Recording.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }
    public enum Source {
        DIALVERB("DialVerb"),
        CONFERENCE("Conference"),
        OUTBOUNDAPI("OutboundAPI"),
        TRUNKING("Trunking"),
        RECORDVERB("RecordVerb"),
        STARTCALLRECORDINGAPI("StartCallRecordingAPI"),
        STARTCONFERENCERECORDINGAPI("StartConferenceRecordingAPI");

        private final String value;

        private Source(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static Source forValue(final String value) {
            return Promoter.enumFromString(value, Source.values());
        }
    }
    public enum Status {
        IN_PROGRESS("in-progress"),
        PAUSED("paused"),
        STOPPED("stopped"),
        PROCESSING("processing"),
        COMPLETED("completed"),
        ABSENT("absent");

        private final String value;

        private Status(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static Status forValue(final String value) {
            return Promoter.enumFromString(value, Status.values());
        }
    }

    private final String accountSid;
    private final String apiVersion;
    private final String callSid;
    private final Integer channels;
    private final String conferenceSid;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;
    private final String duration;
    private final Map<String, Object> encryptionDetails;
    private final Integer errorCode;
    private final String price;
    private final Currency priceUnit;
    private final String sid;
    private final String source;
    private final ZonedDateTime startTime;
    private final String status;
    private final String uri;

    @JsonCreator
    private Recording(
        @JsonProperty("account_sid")
        final String accountSid,

        @JsonProperty("api_version")
        final String apiVersion,

        @JsonProperty("call_sid")
        final String callSid,

        @JsonProperty("channels")
        final Integer channels,

        @JsonProperty("conference_sid")
        final String conferenceSid,

        @JsonProperty("date_created")
        final String dateCreated,

        @JsonProperty("date_updated")
        final String dateUpdated,

        @JsonProperty("duration")
        final String duration,

        @JsonProperty("encryption_details")
        final Map<String, Object> encryptionDetails,

        @JsonProperty("error_code")
        final Integer errorCode,

        @JsonProperty("price")
        final String price,

        @JsonProperty("price_unit")
        @JsonDeserialize(using = com.twilio.converter.CurrencyDeserializer.class)
        final Currency priceUnit,

        @JsonProperty("sid")
        final String sid,

        @JsonProperty("source")
        final String source,

        @JsonProperty("start_time")
        final String startTime,

        @JsonProperty("status")
        final String status,

        @JsonProperty("uri")
        final String uri
    ) {
        this.accountSid = accountSid;
        this.apiVersion = apiVersion;
        this.callSid = callSid;
        this.channels = channels;
        this.conferenceSid = conferenceSid;
        this.dateCreated = DateConverter.rfc2822DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
        this.duration = duration;
        this.encryptionDetails = encryptionDetails;
        this.errorCode = errorCode;
        this.price = price;
        this.priceUnit = priceUnit;
        this.sid = sid;
        this.source = source;
        this.startTime = DateConverter.rfc2822DateTimeFromString(startTime);
        this.status = status;
        this.uri = uri;
    }

        public final String getAccountSid() {
            return this.accountSid;
        }
        public final String getApiVersion() {
            return this.apiVersion;
        }
        public final String getCallSid() {
            return this.callSid;
        }
        public final Integer getChannels() {
            return this.channels;
        }
        public final String getConferenceSid() {
            return this.conferenceSid;
        }
        public final ZonedDateTime getDateCreated() {
            return this.dateCreated;
        }
        public final ZonedDateTime getDateUpdated() {
            return this.dateUpdated;
        }
        public final String getDuration() {
            return this.duration;
        }
        public final Map<String, Object> getEncryptionDetails() {
            return this.encryptionDetails;
        }
        public final Integer getErrorCode() {
            return this.errorCode;
        }
        public final String getPrice() {
            return this.price;
        }
        public final Currency getPriceUnit() {
            return this.priceUnit;
        }
        public final String getSid() {
            return this.sid;
        }
        public final String getSource() {
            return this.source;
        }
        public final ZonedDateTime getStartTime() {
            return this.startTime;
        }
        public final String getStatus() {
            return this.status;
        }
        public final String getUri() {
            return this.uri;
        }

    @Override
    public boolean equals(final Object o) {
        if (this==o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Recording other = (Recording) o;

        return Objects.equals(accountSid, other.accountSid) &&  Objects.equals(apiVersion, other.apiVersion) &&  Objects.equals(callSid, other.callSid) &&  Objects.equals(channels, other.channels) &&  Objects.equals(conferenceSid, other.conferenceSid) &&  Objects.equals(dateCreated, other.dateCreated) &&  Objects.equals(dateUpdated, other.dateUpdated) &&  Objects.equals(duration, other.duration) &&  Objects.equals(encryptionDetails, other.encryptionDetails) &&  Objects.equals(errorCode, other.errorCode) &&  Objects.equals(price, other.price) &&  Objects.equals(priceUnit, other.priceUnit) &&  Objects.equals(sid, other.sid) &&  Objects.equals(source, other.source) &&  Objects.equals(startTime, other.startTime) &&  Objects.equals(status, other.status) &&  Objects.equals(uri, other.uri)  ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountSid, apiVersion, callSid, channels, conferenceSid, dateCreated, dateUpdated, duration, encryptionDetails, errorCode, price, priceUnit, sid, source, startTime, status, uri);
    }

}

