{{>licenseInfo}}

import { inspect, InspectOptions } from "util";
import Page from "{{apiVersionPath}}/../../base/Page";
import Response from "{{apiVersionPath}}/../../http/response";
import {{apiVersionClass}} from "{{apiVersionPath}}/{{apiVersionClass}}";
const deserialize = require("{{apiVersionPath}}/../../base/deserialize");
const serialize = require("{{apiVersionPath}}/../../base/serialize");
{{#resources}}
{{#dependents}}
import { {{importName}} } from "./{{apiFilename}}/{{filename}}";
{{/dependents}}
{{/resources}}
{{#resources}}
{{>model}}
{{#operations}}
{{#hasParams}}
{{#vendorExtensions.x-is-list-operation}}{{>listOperationsOptions}}{{/vendorExtensions.x-is-list-operation}}
{{^vendorExtensions.x-is-list-operation}}
{{^bodyParam}}
/**
 * Options to pass to {{vendorExtensions.x-name-lower}} a {{instanceName}}
 *
 {{#allParams}}
 * @property { {{{dataType}}} } {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
 {{/allParams}}
 */
export interface {{resourceName}}{{vendorExtensions.x-name}}Options {
  {{#allParams}}
  {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
{{/bodyParam}}
{{/vendorExtensions.x-is-list-operation}}
{{/hasParams}}
{{/operations}}
{{/resources}}
{{#resources}}

export interface {{resourceName}} {
  {{#instanceResource}}
  ({{#resourcePathParams}}{{#-last}}{{paramName}}: {{dataType}}{{/-last}}{{/resourcePathParams}}): {{resourceName}};
  get({{#resourcePathParams}}{{#-last}}{{paramName}}: {{dataType}}{{/-last}}{{/resourcePathParams}}): {{resourceName}};
  {{/instanceResource}}

  {{#dependents}}
  {{mountName}}: {{name}};
  {{/dependents}}

{{#operations}}
{{^vendorExtensions.x-is-list-operation}}{{>operationSignature}}{{/vendorExtensions.x-is-list-operation}}
{{#vendorExtensions.x-is-list-operation}}{{>listInterfaceFunctions}}{{/vendorExtensions.x-is-list-operation}}
{{/operations}}
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

{{#parentResourceName}}
export interface {{resourceName}}Solution {
{{#resourcePathParams}}
  {{paramName}}?: {{{dataType}}};
{{/resourcePathParams}}
}

export class {{resourceName}}Impl implements {{resourceName}} {
  protected _solution: {{resourceName}}Solution;
  protected _uri: string;

  {{#dependents}}
  protected _{{mountName}}?: {{name}};
  {{/dependents}}

  constructor(protected _version: {{apiVersionClass}}{{#resourcePathParams}}, {{paramName}}: {{{dataType}}}{{/resourcePathParams}}) {
    this._solution = { {{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}} };
    this._uri = `{{path}}`;
  }

  {{#dependents}}
  get {{mountName}}(): {{name}} {
    this._{{mountName}} = this._{{mountName}} || {{name}}(this._version{{#resourcePathParams}}, this._solution.{{paramName}}{{/resourcePathParams}});
    return this._{{mountName}};
  }

  {{/dependents}}
  {{#operations}}
  {{vendorExtensions.x-name-lower}}({{#hasParams}}params{{^hasRequiredParams}}?{{/hasRequiredParams}}: any, {{/hasParams}}callback?: any): Promise<{{returnType}}> {
  {{>operation}}
  }

{{/operations}}
  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
{{/parentResourceName}}
{{^parentResourceName}}
export interface {{name}}Solution {
{{#resourcePathParams}}
  {{paramName}}?: {{{dataType}}};
{{/resourcePathParams}}
}

interface {{resourceName}}Impl extends {{resourceName}} {}
class {{resourceName}}Impl implements {{resourceName}} {
  _version?: {{apiVersionClass}};
  _solution?: {{name}}Solution;
  _uri?: string;

  {{#dependents}}
  _{{mountName}}?: {{name}};
  {{/dependents}}
}

export function {{resourceName}}(version: {{apiVersionClass}}{{#resourcePathParams}}, {{paramName}}: {{{dataType}}}{{/resourcePathParams}}): {{resourceName}} {
  {{#instanceResource}}
  const instance = (({{#resourcePathParams}}{{#-last}}{{paramName}}{{/-last}}{{/resourcePathParams}}) => instance.get({{#resourcePathParams}}{{#-last}}{{paramName}}{{/-last}}{{/resourcePathParams}})) as {{parentResourceName}}Impl;

  instance.get = function get({{#resourcePathParams}}{{#-last}}{{paramName}}{{/-last}}{{/resourcePathParams}}): {{resourceName}} {
    return new {{resourceName}}Impl(version{{#resourcePathParams}}, {{paramName}}{{/resourcePathParams}});
  }
  {{/instanceResource}}
  {{^instanceResource}}
  const instance = {} as {{resourceName}}Impl;
  {{/instanceResource}}

  instance._version = version;
  instance._solution = { {{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}} };
  instance._uri = `{{path}}`;

  {{#dependents}}
  Object.defineProperty(instance, "{{mountName}}", {
    get: function {{mountName}}() {
      if (!this._{{mountName}}) {
        this._{{mountName}} = {{name}}(this._version{{#resourcePathParams}}, this._solution.{{paramName}}{{/resourcePathParams}});
      }
      return this._{{mountName}};
    }
  });

  {{/dependents}}
{{#operations}}
  instance.{{vendorExtensions.x-name-lower}} = function {{vendorExtensions.x-name-lower}}({{#hasParams}}params{{^hasRequiredParams}}?{{/hasRequiredParams}}: any, {{/hasParams}}callback?: any): Promise<{{returnType}}> {
{{>operation}}
{{^vendorExtensions.x-is-list-operation}}
    }
{{/vendorExtensions.x-is-list-operation}}

{{/operations}}
  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}
{{/parentResourceName}}
{{>responseModel}}
{{/resources}}
