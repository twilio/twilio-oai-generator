{{>licenseInfo}}
import { inspect } from 'util';
import {{apiVersionClass}} from '{{apiVersionPath}}/{{apiVersionClass}}';
{{#resources}}
{{#dependents}}
import { {{name}}ListInstance } from './{{apiFilename}}/{{filename}}';
{{/dependents}}
{{/resources}}

{{#resources}}
{{>model}}
{{#operations}}
{{#hasParams}}
{{^bodyParam}}
/**
 * Options to pass to {{vendorExtensions.x-name-lower}} a {{instanceName}}
 *
 {{#allParams}}
 * @property { {{{dataType}}} } {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
 {{/allParams}}
 */
export interface {{resourceName}}Instance{{vendorExtensions.x-name}}Options {
    {{#allParams}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
    {{/allParams}}
}
{{/bodyParam}}
{{/hasParams}}
{{/operations}}
{{/resources}}
{{#resources}}

export interface {{resourceName}} {
    {{#instanceResource}}
    ({{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}}): {{resourceName}};
    get({{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}}): {{resourceName}};
    {{/instanceResource}}

    {{#dependents}}
    {{mountName}}?: {{name}}ListInstance;
    {{/dependents}}

{{#operations}}
{{>operationSignature}};
{{/operations}}
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
}

{{#parentResourceName}}
export class {{resourceName}}Impl implements {{resourceName}} {
    protected _solution: any;
    protected _uri: string;

    {{#dependents}}
    protected _{{mountName}}?: {{name}}ListInstance;
    {{/dependents}}

    constructor(protected _version: {{apiVersionClass}}{{#resourcePathParams}}, {{paramName}}: {{{dataType}}}{{/resourcePathParams}}) {
        this._solution = { {{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}} };
        this._uri = `{{path}}`;
    }

    {{#dependents}}
    get {{mountName}}(): {{name}}ListInstance {
        this._{{mountName}} = this._{{mountName}} || new {{name}}ListInstance(this._version{{#resourcePathParams}}, this._solution.{{paramName}}{{/resourcePathParams}});
        return this._{{mountName}};
    }

    {{/dependents}}
{{#operations}}
    {{vendorExtensions.x-name-lower}}({{#hasParams}}params{{^hasRequiredParams}}?{{/hasRequiredParams}}: any, {{/hasParams}}callback?: any): Promise<{{instanceName}}> {
{{>operation}}
    }

{{/operations}}
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return this._solution;
    }

    [inspect.custom](_depth, options) {
        return inspect(this.toJSON(), options);
    }
}
{{/parentResourceName}}

{{^parentResourceName}}
interface {{resourceName}}Impl extends {{resourceName}} {}
class {{resourceName}}Impl implements {{resourceName}} {
    _version: {{apiVersionClass}};
    _solution: any;
    _uri: string;

    {{#dependents}}
    _{{mountName}}?: {{name}}ListInstance;
    {{/dependents}}
}

export function {{resourceName}}(version: {{apiVersionClass}}{{#resourcePathParams}}, {{paramName}}: {{{dataType}}}{{/resourcePathParams}}): {{resourceName}} {
    {{#instanceResource}}
    const instance = (({{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}}) => instance.get({{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}})) as {{parentResourceName}}Impl;

    instance.get = function get({{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}}): {{resourceName}} {
        return new {{resourceName}}Impl(version{{#resourcePathParams}}, {{paramName}}{{/resourcePathParams}});
    }
    {{/instanceResource}}
    {{^instanceResource}}
    const instance = {} as {{resourceName}}Impl;
    {{/instanceResource}}

    instance._version = version;
    instance._solution = { {{#resourcePathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/resourcePathParams}} };
    instance._uri = `{{path}}`;

    {{#dependents}}
    Object.defineProperty(instance, {{mountName}}, {
        get: function {{mountName}}() {
            if (!this._{{mountName}}) {
                this._{{mountName}} = new {{name}}ListInstance(this._version{{#resourcePathParams}}, this._solution.{{paramName}}{{/resourcePathParams}});
            }
            return this._{{mountName}};
        }
    });

    {{/dependents}}
{{#operations}}
    instance.{{vendorExtensions.x-name-lower}} = function {{vendorExtensions.x-name-lower}}({{#hasParams}}params{{^hasRequiredParams}}?{{/hasRequiredParams}}: any, {{/hasParams}}callback?: any): Promise<{{instanceName}}> {
{{>operation}}
    }

{{/operations}}
    instance.toJSON = function toJSON() {
        return this._solution;
    }

    instance[inspect.custom] = function inspectImpl(_depth, options) {
        return inspect(this.toJSON(), options);
    }

    return instance;
}
{{/parentResourceName}}
{{>responseModel}}
{{/resources}}
