{{>licenseInfo}}
{{#resources}}

import { inspect, InspectOptions } from "util";
{{#hasPaginationOperation}}
import Page, { TwilioResponsePayload } from "{{apiVersionPath}}/../../base/Page";
import Response from "{{apiVersionPath}}/../../http/response";
{{/hasPaginationOperation}}
import {{apiVersionClass}} from "{{apiVersionPath}}/{{apiVersionClass}}";
const deserialize = require("{{apiVersionPath}}/../../base/deserialize");
const serialize = require("{{apiVersionPath}}/../../base/serialize");
import { isValidPathParam } from "{{apiVersionPath}}/../../base/utility";
{{#dependents}}
import { {{importName}} } from "./{{apiFilename}}/{{filename}}";
{{/dependents}}
{{>imports}}
{{>model}}
{{#operations}}
{{#vendorExtensions.x-is-read-operation}}{{>listOperationsOptions}}{{/vendorExtensions.x-is-read-operation}}
{{#hasParams}}
{{^vendorExtensions.x-is-read-operation}}
/**
 * Options to pass to {{vendorExtensions.x-name-lower}} a {{instanceName}}
 *
 {{#allParams}}
 * @property { {{{dataType}}} } {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{{description}}}
 {{/allParams}}
 */
export interface {{vendorExtensions.x-resource-name}}{{vendorExtensions.x-name}}Options {
  {{#allParams}}
  "{{paramName}}"{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
{{/vendorExtensions.x-is-read-operation}}
{{/hasParams}}
{{/operations}}

{{#instancePath}}
export interface {{apiName}}Context {
  {{#dependents}}
  {{#instanceDependent}}
  {{mountName}}: {{type}};
  {{/instanceDependent}}
  {{/dependents}}

{{#operations}}
{{#vendorExtensions.x-is-context-operation}}{{>operationSignature}}{{/vendorExtensions.x-is-context-operation}}
{{/operations}}
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface {{apiName}}ContextSolution {
{{#instancePathParams}}
  "{{paramName}}"?: {{{dataType}}};
{{/instancePathParams}}
}

export class {{apiName}}ContextImpl implements {{apiName}}Context {
  protected _solution: {{apiName}}ContextSolution;
  protected _uri: string;

  {{#dependents}}
  {{#instanceDependent}}
  protected _{{mountName}}?: {{type}};
  {{/instanceDependent}}
  {{/dependents}}

  constructor(protected _version: {{apiVersionClass}}{{#instancePathParams}}, {{paramName}}: {{{dataType}}}{{/instancePathParams}}) {
    {{#instancePathParams}}
    if (!isValidPathParam({{paramName}})) {
      throw new Error('Parameter \'{{paramName}}\' is not valid.');
    }

    {{/instancePathParams}}
    this._solution = { {{#instancePathParams}}{{paramName}}, {{/instancePathParams}} };
    this._uri = `{{instancePath}}`;
  }

  {{#dependents}}
  {{#instanceDependent}}
  get {{mountName}}(): {{type}} {
    this._{{mountName}} = this._{{mountName}} || {{className}}(this._version{{#instancePathParams}}, this._solution.{{paramName}}{{/instancePathParams}});
    return this._{{mountName}};
  }

  {{/instanceDependent}}
  {{/dependents}}
  {{#operations}}
  {{#vendorExtensions.x-is-context-operation}}
  {{vendorExtensions.x-name-lower}}({{#hasParams}}params{{^hasRequiredParams}}?{{/hasRequiredParams}}: any, {{/hasParams}}callback?: any): Promise<{{returnType}}> {
  {{>operation}}
  }

  {{/vendorExtensions.x-is-context-operation}}
  {{/operations}}
  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

{{>responseModel}}
{{/instancePath}}

export interface {{apiName}}ListInstance {
  {{#instancePath}}
  ({{#instancePathParams}}{{^vendorExtensions.x-is-parent-param}}{{paramName}}: {{dataType}}, {{/vendorExtensions.x-is-parent-param}}{{/instancePathParams}}): {{apiName}}Context;
  get({{#instancePathParams}}{{^vendorExtensions.x-is-parent-param}}{{paramName}}: {{dataType}}, {{/vendorExtensions.x-is-parent-param}}{{/instancePathParams}}): {{apiName}}Context;
  {{/instancePath}}

  {{#dependents}}
  {{^instanceDependent}}
  {{mountName}}: {{type}};
  {{/instanceDependent}}
  {{/dependents}}

{{#operations}}
{{^vendorExtensions.x-is-read-operation}}{{#vendorExtensions.x-is-list-operation}}{{>operationSignature}}{{/vendorExtensions.x-is-list-operation}}{{/vendorExtensions.x-is-read-operation}}
{{#vendorExtensions.x-is-read-operation}}{{>listInterfaceFunctions}}{{/vendorExtensions.x-is-read-operation}}
{{/operations}}
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface {{apiName}}Solution {
{{#listPathParams}}
  {{paramName}}?: {{{dataType}}};
{{/listPathParams}}
}

interface {{apiName}}ListInstanceImpl extends {{apiName}}ListInstance {}
class {{apiName}}ListInstanceImpl implements {{apiName}}ListInstance {
  _version?: {{apiVersionClass}};
  _solution?: {{apiName}}Solution;
  _uri?: string;

  {{#dependents}}
  {{^instanceDependent}}
  _{{mountName}}?: {{type}};
  {{/instanceDependent}}
  {{/dependents}}
}

export function {{apiName}}ListInstance(version: {{apiVersionClass}}{{#listPathParams}}, {{paramName}}: {{{dataType}}}{{/listPathParams}}): {{apiName}}ListInstance {
  {{#listPathParams}}
  if (!isValidPathParam({{paramName}})) {
    throw new Error('Parameter \'{{paramName}}\' is not valid.');
  }

  {{/listPathParams}}
  {{#instancePath}}
  const instance = (({{#instancePathParams}}{{^vendorExtensions.x-is-parent-param}}{{paramName}}, {{/vendorExtensions.x-is-parent-param}}{{/instancePathParams}}) => instance.get({{#instancePathParams}}{{^vendorExtensions.x-is-parent-param}}{{paramName}}, {{/vendorExtensions.x-is-parent-param}}{{/instancePathParams}})) as {{apiName}}ListInstanceImpl;

  instance.get = function get({{#instancePathParams}}{{^vendorExtensions.x-is-parent-param}}{{paramName}}, {{/vendorExtensions.x-is-parent-param}}{{/instancePathParams}}): {{apiName}}Context {
    return new {{apiName}}ContextImpl(version{{#instancePathParams}}, {{paramName}}{{/instancePathParams}});
  }
  {{/instancePath}}
  {{^instancePath}}
  const instance = {} as {{apiName}}ListInstanceImpl;
  {{/instancePath}}

  instance._version = version;
  instance._solution = { {{#listPathParams}}{{paramName}}, {{/listPathParams}} };
  instance._uri = `{{listPath}}`;

  {{#dependents}}
  {{^instanceDependent}}
  Object.defineProperty(instance, "{{mountName}}", {
    get: function {{mountName}}() {
      if (!this._{{mountName}}) {
        this._{{mountName}} = {{className}}(this._version{{#listPathParams}}, this._solution.{{paramName}}{{/listPathParams}});
      }
      return this._{{mountName}};
    }
  });

  {{/instanceDependent}}
  {{/dependents}}
{{#operations}}
{{#vendorExtensions.x-is-list-operation}}
  instance.{{vendorExtensions.x-name-lower}} = function {{vendorExtensions.x-name-lower}}({{#hasParams}}params{{^hasRequiredParams}}?{{/hasRequiredParams}}: any, {{/hasParams}}callback?: any): Promise<{{returnType}}> {
{{>operation}}
{{^vendorExtensions.x-is-read-operation}}
    }
{{/vendorExtensions.x-is-read-operation}}

{{/vendorExtensions.x-is-list-operation}}
{{/operations}}
  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}
{{^instancePath}}{{>responseModel}}{{/instancePath}}
{{#hasPaginationOperation}}{{>pagination}}{{/hasPaginationOperation}}
{{/resources}}
