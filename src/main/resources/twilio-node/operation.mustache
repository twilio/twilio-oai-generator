{{#hasParams}}
    {{#hasRequiredParams}}
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }

        {{#requiredParams}}
        {{^isBodyParam}}
        if (params.{{paramName}} === null || params.{{paramName}} === undefined) {
            throw new Error('Required parameter "params.{{paramName}}" missing.');
        }

        {{/isBodyParam}}
        {{/requiredParams}}
    {{/hasRequiredParams}}
    {{^hasRequiredParams}}
        if (typeof params === 'function') {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }

    {{/hasRequiredParams}}
    {{^bodyParam}}
        const data: any = {};

        {{#queryParams}}
        {{#vendorExtensions.x-serialize}}
        {{^required}}if (params.{{paramName}} !== undefined) {{/required}}data['{{{baseName}}}'] = {{vendorExtensions.x-serialize}}(params.{{paramName}}{{#vendorExtensions.x-is-array}}, ((e) => e){{/vendorExtensions.x-is-array}}{{#vendorExtensions.x-prefixed-collapsible-map}}, "{{vendorExtensions.x-prefixed-collapsible-map}}"{{/vendorExtensions.x-prefixed-collapsible-map}});
        {{/vendorExtensions.x-serialize}}
        {{^vendorExtensions.x-serialize}}
        {{^required}}if (params.{{paramName}} !== undefined) {{/required}}data['{{{baseName}}}'] = params.{{paramName}};
        {{/vendorExtensions.x-serialize}}
        {{/queryParams}}
        {{#formParams}}
        {{#vendorExtensions.x-serialize}}
        {{^required}}if (params.{{paramName}} !== undefined) {{/required}}data['{{{baseName}}}'] = {{vendorExtensions.x-serialize}}(params.{{paramName}}{{#vendorExtensions.x-is-array}}, ((e) => e){{/vendorExtensions.x-is-array}}{{#vendorExtensions.x-prefixed-collapsible-map}}, "{{vendorExtensions.x-prefixed-collapsible-map}}"{{/vendorExtensions.x-prefixed-collapsible-map}});
        {{/vendorExtensions.x-serialize}}
        {{^vendorExtensions.x-serialize}}
        {{^required}}if (params.{{paramName}} !== undefined) {{/required}}data['{{{baseName}}}'] = params.{{paramName}};
        {{/vendorExtensions.x-serialize}}
        {{/formParams}}
    {{/bodyParam}}

        const headers: any = {};
    {{#consumes}}
    {{#-first}}
        headers['Content-Type'] = '{{{mediaType}}}'
    {{/-first}}
    {{/consumes}}

    {{#headerParams}}
        if (params.{{paramName}} !== undefined) headers['{{{baseName}}}'] = params.{{paramName}};
    {{/headerParams}}
{{/hasParams}}

        let operationVersion = {{#parentResourceName}}this._version{{/parentResourceName}}{{^parentResourceName}}version{{/parentResourceName}},
            operationPromise = operationVersion.{{vendorExtensions.x-name-lower}}({ uri: this._uri, method: '{{httpMethod}}'{{#hasParams}}{{#bodyParam}}, body: params{{/bodyParam}}{{^bodyParam}}, params: data{{/bodyParam}}, headers{{/hasParams}} });

        {{^vendorExtensions.x-is-delete-operation}}
        operationPromise = operationPromise.then(payload => new {{instanceName}}(operationVersion, payload{{#resourcePathParams}}, this._solution.{{paramName}}{{/resourcePathParams}}));
        {{/vendorExtensions.x-is-delete-operation}}

        if (typeof callback === 'function') {
            operationPromise = operationPromise
                .then(value => callback(null, value))
                .catch(error => callback(error));
        }

        return operationPromise;
