{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"encoding/json"
	"fmt"
	"net/url"

	{{#imports}}
    "{{import}}"
    {{/imports}}
    "github.com/twilio/twilio-go/client"
)

{{#operation}}
{{#hasOptionalParams}}

// Optional parameters for the method '{{{nickname}}}'
type {{{nickname}}}Params struct {
{{#optionalParams}}
    // {{{description}}}
    {{paramName}} *{{{dataType}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}}{{/vendorExtensions.x-go-custom-tag}}`
{{/optionalParams}}
}

{{#optionalParams}}
func (params *{{{nickname}}}Params) Set{{paramName}}({{paramName}} {{{dataType}}}) (*{{{nickname}}}Params){
    params.{{paramName}} = &{{paramName}}
    return params
}
{{/optionalParams}}
{{/hasOptionalParams}}

{{^vendorExtensions.x-is-list-operation}}
{{#notes}}
// {{notes}}
{{/notes}}
func (c *ApiService) {{{nickname}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}params *{{{nickname}}}Params{{/hasOptionalParams}}) ({{#returnType}}*{{{returnType}}}, {{/returnType}}error) {
    path := "{{{path}}}"
    {{>partial_serialization}}

{{#hasHeaderParams}}
{{#headerParams}}
	if params != nil && params.{{paramName}} != nil {
		headers["{{{baseName}}}"] = *params.{{paramName}}
	}
{{/headerParams}}
{{/hasHeaderParams}}

    resp, err := c.requestHandler.{{httpMethod}}(c.baseURL+path, data, headers)
{{#returnType}}
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnType}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
{{/returnType}}
{{^returnType}}
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
{{/returnType}}
}
{{/vendorExtensions.x-is-list-operation}}
{{#vendorExtensions.x-is-list-operation}}
// Retrieve a single page of {{{vendorExtensions.x-domain-name}}} records from the API. Request is executed immediately.
func (c *ApiService) Page{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params *{{{nickname}}}Params, pageToken string, pageNumber string) (*{{{returnType}}}, error) {
    path := "{{{path}}}"

    {{>partial_serialization}}
    if pageToken != "" {
        data.Set("PageToken", pageToken)
    }
    if pageToken != "" {
        data.Set("Page", pageNumber)
    }

    resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnType}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// Lists {{{vendorExtensions.x-domain-name}}} records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) List{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params *{{{nickname}}}Params) ([]{{{vendorExtensions.x-payload-model-name}}}, error) {
    if params == nil {
        params = &{{{nickname}}}Params{}
    }
    params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

    response, err := c.Page{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params, "", "")
    if err != nil {
        return nil, err
    }

    curRecord := 0
    var records []{{{vendorExtensions.x-payload-model-name}}}

    for response != nil {
        records = append(records, response.{{{vendorExtensions.x-payload-field-name}}}...)

        var record interface{}
        if record, err = client.GetNext(response, &curRecord, params.Limit, c.getNext{{{returnType}}}); record == nil || err != nil {
            return records, err
        }

        response = record.(*{{{returnType}}})
    }

    return records, err
}

// Streams {{{vendorExtensions.x-domain-name}}} records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) Stream{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params *{{{nickname}}}Params) (chan {{{vendorExtensions.x-payload-model-name}}}, error) {
    if params == nil {
        params = &{{{nickname}}}Params{}
    }
    params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

    response, err := c.Page{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params, "", "")
    if err != nil {
        return nil, err
    }

    curRecord := 0
    //set buffer size of the channel to 1
    channel := make(chan {{{vendorExtensions.x-payload-model-name}}}, 1)

    go func() {
        for response != nil {
            for item := range response.{{{vendorExtensions.x-payload-field-name}}} {
                channel <- response.{{{vendorExtensions.x-payload-field-name}}}[item]
            }


            var record interface{}
            if record, err = client.GetNext(response, &curRecord, params.Limit, c.getNext{{{returnType}}}); record == nil || err != nil {
                close(channel)
                return
            }

            response = record.(*{{{returnType}}})
        }
        close(channel)
    }()

    return channel, err
}

func (c *ApiService) getNext{{{returnType}}}(nextPageUri string) (interface{}, error) {
    if nextPageUri == "" {
        return nil, nil
    }
    resp, err := c.requestHandler.Get(c.baseURL+nextPageUri, nil, nil)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnType}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }
    return ps, nil
}

{{/vendorExtensions.x-is-list-operation}}
{{/operation}}
{{/operations}}
