{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"encoding/json"
	"fmt"
	"net/url"

    twilio "github.com/twilio/twilio-go/client"
	{{#imports}}
    "{{import}}"
    {{/imports}}
)

type {{classname}}Service struct {
	baseURL         string
	requestHandler  *twilio.RequestHandler
}

func New{{classname}}Service(requestHandler *twilio.RequestHandler) *{{classname}}Service {
	return &{{classname}}Service {
		requestHandler: requestHandler,
		baseURL:        "{{#operation}}{{#-first}}{{#servers}}{{url}}{{/servers}}{{/-first}}{{/operation}}",
	}
}

func New{{classname}}ServiceWithClient(client twilio.BaseClient) *{{classname}}Service {
    return New{{classname}}Service(twilio.NewRequestHandler(client))
}

{{#operation}}
{{#hasOptionalParams}}

// Optional parameters for the method '{{{nickname}}}'
type {{{nickname}}}Params struct {
{{#optionalParams}}
    // {{{description}}}
    {{paramName}} *{{{dataType}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}}{{/vendorExtensions.x-go-custom-tag}}`
{{/optionalParams}}
}

{{#optionalParams}}
func (params *{{{nickname}}}Params) Set{{paramName}}({{paramName}} {{{dataType}}}) (*{{{nickname}}}Params){
    params.{{paramName}} = &{{paramName}}
    return params
}
{{/optionalParams}}
{{/hasOptionalParams}}

{{#notes}}
// {{notes}}
{{/notes}}
func (c *{{{classname}}}Service) {{{nickname}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}params *{{{nickname}}}Params{{/hasOptionalParams}}) ({{#returnType}}*{{{returnType}}}, {{/returnType}}error) {
    path := "{{{path}}}"
{{#pathParams}}
{{^vendorExtensions.x-is-account-sid}}
	path = strings.Replace(path, "{"+"{{paramName}}"+"}", {{^isString}}fmt.Sprint({{/isString}}{{paramName}}{{^isString}}){{/isString}}, -1)
{{/vendorExtensions.x-is-account-sid}}
{{#vendorExtensions.x-is-account-sid}}
    if params != nil && params.PathAccountSid != nil {
        path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
    } else {
        path = strings.Replace(path, "{"+"AccountSid"+"}", c.requestHandler.Client.AccountSid(), -1)
    }
{{/vendorExtensions.x-is-account-sid}}
{{/pathParams}}

    data := url.Values{}
    headers := make(map[string]interface{})

{{#hasOptionalParams}}
{{#optionalParams}}
{{^vendorExtensions.x-is-account-sid}}
{{^isHeaderParam}}
    if params != nil && params.{{paramName}} != nil {
{{#isFreeFormObject}}
	v, err := json.Marshal(params.{{paramName}})

	if err != nil {
	    return nil, err
	}

	data.Set("{{{baseName}}}", string(v))
{{/isFreeFormObject}}
{{^isFreeFormObject}}
    {{#isArray}}
        for _, item  := range *params.{{paramName}} {
            data.Add("{{{baseName}}}", item)
        }
    {{/isArray}}
    {{^isArray}}
        data.Set("{{{baseName}}}", {{^isString}}fmt.Sprint({{/isString}}{{#isDateTime}}({{/isDateTime}}*params.{{paramName}}{{^isString}}{{#isDateTime}}).Format(time.RFC3339){{/isDateTime}}){{/isString}})
    {{/isArray}}
{{/isFreeFormObject}}
}
{{/isHeaderParam}}
{{/vendorExtensions.x-is-account-sid}}
{{/optionalParams}}
{{/hasOptionalParams}}

{{#hasHeaderParams}}
{{#headerParams}}
	if params != nil && params.{{paramName}} != nil {
		headers["{{{baseName}}}"] = *params.{{paramName}}
	}
{{/headerParams}}
{{/hasHeaderParams}}

    resp, err := c.requestHandler.{{httpMethod}}(c.baseURL+path, data, headers)
{{#returnType}}
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnType}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
{{/returnType}}
{{^returnType}}
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
{{/returnType}}
}
{{/operation}}
{{/operations}}
