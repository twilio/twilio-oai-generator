{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"encoding/json"
	"fmt"
	"net/url"

	{{#imports}}
    "{{import}}"
    {{/imports}}
    "github.com/twilio/twilio-go/client"
)

{{#operation}}
{{#hasOptionalParams}}

// Optional parameters for the method '{{{nickname}}}'
type {{{nickname}}}Params struct {
{{#optionalParams}}
    // {{{description}}}
    {{paramName}} *{{{dataType}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}}{{/vendorExtensions.x-go-custom-tag}}`
{{/optionalParams}}
}

{{#optionalParams}}
func (params *{{{nickname}}}Params) Set{{paramName}}({{paramName}} {{{dataType}}}) (*{{{nickname}}}Params){
    params.{{paramName}} = &{{paramName}}
    return params
}
{{/optionalParams}}
{{/hasOptionalParams}}

{{^vendorExtensions.x-is-read-operation}}
{{#notes}}
// {{notes}}
{{/notes}}
func (c *ApiService) {{{nickname}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}params *{{{nickname}}}Params{{/hasOptionalParams}}) ({{#returnType}}*{{{returnType}}}, {{/returnType}}error) {
    path := "{{{path}}}"
    {{>partial_serialization}}

{{#hasHeaderParams}}
{{#headerParams}}
	if params != nil && params.{{paramName}} != nil {
		headers["{{{baseName}}}"] = *params.{{paramName}}
	}
{{/headerParams}}
{{/hasHeaderParams}}

    resp, err := c.requestHandler.{{httpMethod}}(c.baseURL+path, data, headers)
{{#returnType}}
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnType}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
{{/returnType}}
{{^returnType}}
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
{{/returnType}}
}
{{/vendorExtensions.x-is-read-operation}}
{{#vendorExtensions.x-is-read-operation}}
// Retrieve a single page of {{{vendorExtensions.x-domain-name}}} records from the API. Request is executed immediately.
func (c *ApiService) Page{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params *{{{nickname}}}Params, pageToken, pageNumber string) (*{{{returnContainer}}}, error) {
    path := "{{{path}}}"

    {{>partial_serialization}}
    if pageToken != "" {
        data.Set("PageToken", pageToken)
    }
    if pageNumber != "" {
        data.Set("Page", pageNumber)
    }

    resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnContainer}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// Lists {{{vendorExtensions.x-domain-name}}} records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) List{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params *{{{nickname}}}Params) ({{{returnType}}}, error) {
	response, errors := c.Stream{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params)

	records := make({{{returnType}}}, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams {{{vendorExtensions.x-domain-name}}} records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) Stream{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params *{{{nickname}}}Params) (chan {{{returnBaseType}}}, chan error) {
	if params == nil {
		params = &{{{nickname}}}Params{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan {{{returnBaseType}}}, 1)
	errorChannel := make(chan error, 1)

	response, err := c.Page{{{vendorExtensions.x-domain-name}}}({{#allParams}}{{#required}}{{paramName}}{{^last}}, {{/last}}{{/required}}{{/allParams}}params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.stream{{{vendorExtensions.x-domain-name}}}(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}


func (c *ApiService) stream{{{vendorExtensions.x-domain-name}}}(response *{{{returnContainer}}}, params *{{{nickname}}}Params, recordChannel chan {{{returnBaseType}}}, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.{{{vendorExtensions.x-payload-field-name}}}
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNext{{{returnContainer}}})
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*{{{returnContainer}}})
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNext{{{returnContainer}}}(nextPageUrl string) (interface{}, error) {
    if nextPageUrl == "" {
        return nil, nil
    }
    resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &{{{returnContainer}}}{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }
    return ps, nil
}

{{/vendorExtensions.x-is-read-operation}}
{{/operation}}
{{/operations}}
