
{{#metaProperties.x-maturity-desc}}
                ##
                #{{metaProperties.x-maturity-desc}}
{{/metaProperties.x-maturity-desc}}
                class {{apiName}}Context < InstanceContext
                    ##
                    # Initialize the {{apiName}}Context
                    # @param [Version] version Version that contains the resource
                    {{#instancePathParams}}
                    # @param [{{dataType}}] {{paramName}} {{{description}}}
                    {{/instancePathParams}}
                    # @return [{{apiName}}Context] {{apiName}}Context
                    def initialize(version{{#instancePathParams}}, {{paramName}}{{/instancePathParams}})
                        super(version)

                        # Path Solution
                        @solution = { {{#instancePathParams}}{{paramName}}: {{paramName}}, {{/instancePathParams}} }
                        {{#instancePath}}
                        @uri = "{{{instancePath}}}"
                        {{/instancePath}}

                        {{#metaProperties.contextImportProperties.0}}# Dependents{{/metaProperties.contextImportProperties.0}}{{^metaProperties.contextImportProperties}}{{#metaProperties.contextImportMethods.0}}# Dependents{{/metaProperties.contextImportMethods.0}}{{/metaProperties.contextImportProperties}}
                        {{#metaProperties.contextImportProperties}}
                        @{{mountName}} = nil
                        {{/metaProperties.contextImportProperties}}
                        {{#metaProperties.contextImportMethods}}
                        @{{mountName}} = nil
                        {{/metaProperties.contextImportMethods}}
                    end
                    {{#apiOperations}}
                    {{#vendorExtensions.instanceOperation}}
{{>methods}}
{{>contextMethodParams}}
                    {{/vendorExtensions.instanceOperation}}
                    {{/apiOperations}}

                    {{#dependents}}
                      ##
                      # Access the {{mountName}}
                      # @return [{{className}}List]
                      {{#isInstanceAndList}}
                      # @return [{{className}}Context] if {{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}{{/params}} is present
                      def {{mountName}}({{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}=:unset{{/params}})

                          raise ArgumentError, '{{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}{{/params}} cannot be nil' if {{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}{{/params}}.nil?

                          if {{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}{{/params}} != :unset
                            return {{resourceName}}Context.new(@version, {{#requiredPathParams}}@solution[:{{paramName}}],{{/requiredPathParams}} {{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}{{/params}})
                          end

                          unless @{{mountName}}
                            @{{mountName}} ||= {{resourceName}}List.new(@version, {{{mapping}}})
                          end
                      end
                      {{/isInstanceAndList}}
                      {{^isInstanceAndList}}
                        def {{mountName}}
                          unless @{{mountName}}
                            @{{mountName}} = {{resourceName}}List.new(
                                                   @version, {{mapping}} )
                          end
                          @{{mountName}}
                        end
                      {{/isInstanceAndList}}
                    {{/dependents}}


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Context #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Context #{context}>"
                    end
                end
