{{>licenseInfo}}
module Twilio
    module REST
        class {{domainName}}
            class {{apiVersionClass}} < Version
                ##
                # Initialize the {{apiVersionClass}} version of Api
                def initialize(domain)
                    super
                    @version = '{{version}}'
                {{#versionResources}}
                    @{{mountName}} = nil
                {{/versionResources}}
                end

                {{#isApiDomain}}
                ##
                # @param [String] sid The Account Sid that uniquely identifies the account to
                #   fetch
                # @return [Twilio::REST::Api::V2010::AccountContext] if sid was passed.
                # @return [Twilio::REST::Api::V2010::AccountList]
                def accounts(sid=:unset)
                    if sid.nil?
                        raise ArgumentError, 'sid cannot be nil'
                    end
                    if sid == :unset
                        @accounts ||= AccountList.new self
                    else
                        AccountContext.new(self, sid)
                    end
                end

                ##
                # Account provided as the authenticating account
                def account
                    @account ||= AccountContext.new(self, @domain.client.account_sid)
                end

                {{#param}}
                    ##
                    # {{filename}} provided as the authenticating account
                    def {{mountName}}
                        @{{mountName}} ||= {{importName}}.new(self, @domain.client.{{param}})
                    end

                {{/param}}
                {{/isApiDomain}}
            {{#versionResources}}
                {{#pathParams}}
                ##
                ##
                # @param [{{name}}] {{name}} {{description}}
                # @return [Twilio::REST::{{domainName}}::{{apiVersionClass}}::{{mountName}}Context] if {{name}} was passed.
                # @return [Twilio::REST::{{domainName}}::{{apiVersionClass}}::{{mountName}}List]
                def {{mountName}}({{#pathParams}}${{#lambda.camelcase}}{{name}} {{/lambda.camelcase}}=:unset {{^-last}}, {{/-last}}{{/pathParams}})
                    if {{name}}.nil?
                        raise ArgumentError, '{{name}} cannot be nil'
                    end
                    if {{name}} == :unset
                        @{{mountName}} ||= {{mountName}}List.new self
                    else
                        {{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}Context.new(self, {{name}})
                    end
                end
                {{/pathParams}}
                {{^pathParams}}
                ##
                # @return [Twilio::REST::{{domainName}}::{{apiVersionClass}}::{{mountName}}Context]
                def {{mountName}}
                    @{{mountName}} ||= {{mountName}}List.new self
                end
                {{/pathParams}}
            {{/versionResources}}

                ##
                # Provide a user friendly representation
                def to_s
                    '<Twilio::REST::{{domainName}}::{{apiVersionClass}}>';
                end
            end
        end
    end
end
