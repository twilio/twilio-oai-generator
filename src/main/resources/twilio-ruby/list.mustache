                class {{apiName}}List < ListResource
                    ##
                    # Initialize the {{apiName}}List
                    # @param [Version] version Version that contains the resource
                    # @return [{{apiName}}List] {{apiName}}List
                    def initialize(version{{#listPathParams}}, {{paramName}}{{/listPathParams}})
                        super(version)
                        # Path Solution
                        @solution = { {{#listPathParams}}{{paramName}}: {{paramName}},{{/listPathParams}} }
                        {{#listPath}}@uri = "{{listPath}}"{{/listPath}}
                        {{#componentContextClasses}}#Components{{/componentContextClasses}}
                        {{#componentContextClasses}}
                        @{{mountName}} = nil
                        {{/componentContextClasses}}
                    end
                {{#operations}}{{#vendorExtensions.x-is-create-operation}}{{#hasParams}}
                    ##
                    # Create the {{apiName}}Instance
                    {{#allParams}}
                    # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/allParams}}
                    # @return [{{apiName}}Instance] Created {{apiName}}Instance
                    def create({{#allParams}}{{>params}}{{/allParams}})
                        data = Twilio::Values.of(
                            {{#allParams}}{{^vendorExtensions.x-serialize}}
                            '{{{baseName}}}' => {{paramName}},
                            {{/vendorExtensions.x-serialize}}{{#vendorExtensions.x-serialize}}
                            '{{{baseName}}}' =>  {{vendorExtensions.x-serialize}}({{paramName}}) { |e| e },
                            {{/vendorExtensions.x-serialize}}
                        {{/allParams}}
                        })

                        payload = @version.create('POST', @uri, data: data)

                        {{apiName}}Instance.new(@version, payload, {{#listPathParams}} {{paramName}}: @solution[:{{paramName}}],{{/listPathParams}})
                    end
                    {{/hasParams}}{{/vendorExtensions.x-is-create-operation}}{{/operations}}
                    {{#operations}}{{#vendorExtensions.x-is-read-operation}}
                    ##
                    # Lists {{apiName}}Instance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    {{#readParams}}
                    # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/readParams}}
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list({{#readParams}}{{>params}}{{/readParams}} limit: nil, page_size: nil)
                        self.stream(
                    {{#readParams}}
                            {{paramName}}: {{paramName}},
                    {{/readParams}}
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams {{apiname}}Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    {{#readParams}}
                    # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/readParams}}
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream({{#readParams}}{{>params}}{{/readParams}} limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                        {{#readParams}}
                            {{paramName}}: {{paramName}},
                        {{/readParams}}
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields {{apiName}}Instance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                        limit: limits[:limit],
                        page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of {{apiName}}Instance records from the API.
                    # Request is executed immediately.
                    {{#readParams}}
                    # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/readParams}}
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of {{apiName}}Instance
                    def page({{#readParams}}{{>params}}{{/readParams}} page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            {{#readParams}}{{^vendorExtensions.x-serialize}}
                            '{{{baseName}}}' => {{paramName}},
                            {{/vendorExtensions.x-serialize}}{{#vendorExtensions.x-serialize}}
                            '{{{baseName}}}' =>  {{vendorExtensions.x-serialize}}({{paramName}}),
                            {{/vendorExtensions.x-serialize}}{{/readParams}}
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })

                        response = @version.page('GET', @uri, params: params)

                        {{apiName}}Page.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of {{apiName}}Instance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of {{apiName}}Instance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    {{apiName}}Page.new(@version, response, @solution)
                    end
                    {{/vendorExtensions.x-is-read-operation}}{{/operations}}
                    ##
                {{#componentContextClasses}}
                ##
                # Access the {{mountName}}
                # @return [{{#lambda.titlecase}}{{mountName}}{{/lambda.titlecase}}List]
                # @return [{{#lambda.titlecase}}{{mountName}}{{/lambda.titlecase}}Context] if sid was passed.
                def {{mountName}}({{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}=:unset{{/params}})
                {{#params}}
                    raise ArgumentError, '{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}} cannot be nil' if {{#lambda.snakecase}}{{.}}{{/lambda.snakecase}}.nil?
                {{/params}}

                    if {{#params}}{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}} != :unset{{/params}}
                        return {{#lambda.titlecase}}{{mountName}}{{/lambda.titlecase}}Context.new(@version{{#listPathParams}}, @solution[:{{paramName}}]{{/listPathParams}}{{#params}},{{#lambda.snakecase}}{{.}}{{/lambda.snakecase}} {{/params}})
                    end

                    @{{mountName}} ||= {{#lambda.titlecase}}{{mountName}}{{/lambda.titlecase}}List.new(@version{{#listPathParams}}, {{paramName}}: @solution[:{{paramName}}]{{/listPathParams}} )
                end
                {{/componentContextClasses}}

                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}List>'
                    end
                end