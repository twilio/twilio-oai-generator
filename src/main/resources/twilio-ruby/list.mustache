                class {{apiName}}List < ListResource
                    ##
                    # Initialize the {{apiName}}List
                    # @param [Version] version Version that contains the resource
                    # @return [{{apiName}}List] {{apiName}}List
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {}
                        @uri = "{{instancePath}}"
                    end


                {{#operations}}{{#vendorExtensions.x-is-create-operation}}
                    ##
                    # Create the {{apiName}}Instance
                    {{#formParams}}
                    # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/formParams}}
                    # @return [{{apiName}}Instance] Created {{apiName}}Instance
                    def create({{>params}})
                        data = Twilio::Values.of({{#formParams}}
                    '{{baseName}}' => {{paramName}},
                    }){{/formParams}}

                        payload = @version.create('POST', @uri, data: data)

                        {{apiname}}Instance.new(@version, payload, )
                    end
                    {{/vendorExtensions.x-is-create-operation}}{{/operations}}
                    {{#operations}}{{#vendorExtensions.x-is-read-operation}}
                    ##
                    # Lists {{apiName}}Instance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    {{#formParams}}
                    # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/formParams}}
                    # @return [Array] Array of up to limit results
                    def list({{>params}})
                        self.stream(
                    {{#optionalParams}}
                        {{paramName}}: {{paramName}},
                        limit: limit,
                    {{/optionalParams}}
                        ).entries
                    end

                    ##
                    # Streams {{apiname}}Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    {{#optionalParams}}
                        # @param [{{dataType}}] {{paramName}} {{description}}
                    {{/optionalParams}}
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(friendly_name: :unset, status: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(friendly_name: friendly_name, status: status, page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields {{apiName}}Instance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                        limit: limits[:limit],
                        page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of AccountInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] friendly_name Only return the Account resources with friendly
                    #   names that exactly match this name.
                    # @param [account.Status] status Only return Account resources with the given
                    #   status. Can be `closed`, `suspended` or `active`.
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of AccountInstance
                    def page(friendly_name: :unset, status: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                    params = Twilio::Values.of({
                    'FriendlyName' => friendly_name,
                    'Status' => status,
                    'PageToken' => page_token,
                    'Page' => page_number,
                    'PageSize' => page_size,
                    })

                    response = @version.page('GET', @uri, params: params)

                    AccountPage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of AccountInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of AccountInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    {{apiName}}Page.new(@version, response, @solution)
                    end
                    {{/vendorExtensions.x-is-read-operation}}{{/operations}}
                    ##
                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}List>'
                    end
                end