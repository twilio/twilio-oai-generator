
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            {{#vendorExtensions.x-getparams}}
            {{#isArray}}
            if ({{paramName}} != null)
            {
                p.AddRange({{paramName}}.Select({{paramName}} => new KeyValuePair<string, string>("{{{baseName}}}", {{{vendorExtensions.x-param-to-string}}})));
            }
            {{/isArray}}
            {{^isArray}}
            {{^vendorExtensions.x-parameter-map}}
            if ({{paramName}} != null)
            {
                p.Add(new KeyValuePair<string, string>("{{{baseName}}}", {{{vendorExtensions.x-param-to-string}}}));
            }
            {{/vendorExtensions.x-parameter-map}}
            {{#vendorExtensions.x-parameter-map}}
            if ({{paramName}} != null)
            {
                p.AddRange(PrefixedCollapsibleMap.Serialize({{{baseName}}}, "{{{vendorExtensions.x-map-value}}}"));
            }
            {{/vendorExtensions.x-parameter-map}}
            {{/isArray}}
            {{#vendorExtensions.x-before-or-after}}
            else
            {
            {{#vendorExtensions.x-before}}
                if ({{paramName}} != null)
                {
                    p.Add(new KeyValuePair<string, string>("{{{baseName}}}", {{{vendorExtensions.x-param-to-string}}}));
                }
            {{/vendorExtensions.x-before}}
            {{#vendorExtensions.x-after}}
                if ({{paramName}} != null)
                {
                    p.Add(new KeyValuePair<string, string>("{{{baseName}}}", {{{vendorExtensions.x-param-to-string}}}));
                }
            {{/vendorExtensions.x-after}}
            }
            {{/vendorExtensions.x-before-or-after}}
            {{/vendorExtensions.x-getparams}}
            return p;
        }
