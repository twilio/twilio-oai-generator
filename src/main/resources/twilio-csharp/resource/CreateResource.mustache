
        private static Request BuildCreateRequest(Create{{resourceName}}Options options, ITwilioRestClient client)
        {
            {{>resource/GeneratePath}}

            return new Request(
                HttpMethod.Post,
                Rest.Domain.{{domainPackage}},
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        public static {{resourceName}}{{resourceConstant}} Create(Create{{resourceName}}Options options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        public static async System.Threading.Tasks.Task<{{resourceName}}{{resourceConstant}}> CreateAsync(Create{{resourceName}}Options options,
        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        public static {{resourceName}}{{resourceConstant}} Create(string friendlyName = null, ITwilioRestClient client = null)
        {
            var options = new Create{{resourceName}}Options(){FriendlyName = friendlyName};
            return Create(options, client);
        }

        #if !NET35
        public static async System.Threading.Tasks.Task<{{resourceName}}{{resourceConstant}}> CreateAsync(string friendlyName = null,
                                                                                                          ITwilioRestClient client = null)
        {
            var options = new Create{{resourceName}}Options(){FriendlyName = friendlyName};
            return await CreateAsync(options, client);
        }
        #endif

        public static {{resourceName}}{{resourceConstant}} Create(

        )
        {

        }
