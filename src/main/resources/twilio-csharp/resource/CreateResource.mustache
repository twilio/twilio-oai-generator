
<<<<<<< HEAD
        private static {{requestName}}Request BuildCreateRequest(Create{{apiName}}Options options, {{clientName}} client)
        {
            {{>resource/GeneratePath}}
            return new {{requestName}}Request(
=======
        private static {{authMethod}}Request BuildCreateRequest(Create{{apiName}}Options options, {{restClientPrefix}}Twilio{{authMethod}}RestClient client)
        {
            {{>resource/GeneratePath}}
            return new {{authMethod}}Request(
>>>>>>> a326080 (orgs api uptake for twilio csharp)
                {{vendorExtensions.x-http-method}},
                Rest.Domain.{{domainPackage}},
                path,
                {{^vendorExtensions.x-is-json}}
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),{{/vendorExtensions.x-is-json}}
                {{#vendorExtensions.x-is-json}}
                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                {{/vendorExtensions.x-is-json}}
                headerParams: {{^vendorExtensions.hasOptionalHeaderParams}}null{{/vendorExtensions.hasOptionalHeaderParams}}{{#vendorExtensions.hasOptionalHeaderParams}}options.GetHeaderParams(){{/vendorExtensions.hasOptionalHeaderParams}}
            );
        }

        {{>Summary}}
        /// <param name="options"> Create {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnComments}}
<<<<<<< HEAD
        public static {{apiName}}{{resourceConstant}} Create(Create{{apiName}}Options options, {{clientName}} client = null)
        {
            client = client ?? {{domainClass}}.{{restClientMethodName}}();
=======
        public static {{apiName}}{{resourceConstant}} Create(Create{{apiName}}Options options, {{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
        {
            client = client ?? Twilio{{domainClassPrefix}}Client.GetRestClient();
>>>>>>> a326080 (orgs api uptake for twilio csharp)
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        {{>Summary}}
        /// <param name="options"> Create {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnCommentsAsync}}
<<<<<<< HEAD
        public static async System.Threading.Tasks.Task<{{apiName}}{{resourceConstant}}> CreateAsync(Create{{apiName}}Options options, {{clientName}} client = null)
        {
            client = client ?? {{domainClass}}.{{restClientMethodName}}();
=======
        public static async System.Threading.Tasks.Task<{{apiName}}{{resourceConstant}}> CreateAsync(Create{{apiName}}Options options, {{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
        {
            client = client ?? Twilio{{domainClassPrefix}}Client.GetRestClient();
>>>>>>> a326080 (orgs api uptake for twilio csharp)
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        {{>Summary}}{{>resource/MethodsComments}}
        {{>resource/ReturnComments}}
        public static {{apiName}}{{resourceConstant}} Create({{#vendorExtensions.x-request-body-param}}
                                          {{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}},{{/vendorExtensions.x-request-body-param}}
<<<<<<< HEAD
                                            {{clientName}} client = null)
=======
                                            {{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
>>>>>>> a326080 (orgs api uptake for twilio csharp)
        {
            var options = new Create{{apiName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}){ {{#vendorExtensions.x-request-body-param}}{{^required}} {{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}},{{/-last}}{{/required}}{{/vendorExtensions.x-request-body-param}} };
            return Create(options, client);
        }

        #if !NET35
        {{>Summary}}{{>resource/MethodsComments}}
        {{>resource/ReturnCommentsAsync}}
        public static async System.Threading.Tasks.Task<{{apiName}}{{resourceConstant}}> CreateAsync({{#vendorExtensions.x-request-body-param}}
                                                                                  {{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}},{{/vendorExtensions.x-request-body-param}}
<<<<<<< HEAD
                                                                                    {{clientName}} client = null)
=======
                                                                                    {{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
>>>>>>> a326080 (orgs api uptake for twilio csharp)
        {
        var options = new Create{{apiName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}){ {{#vendorExtensions.x-request-body-param}}{{^required}} {{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}},{{/-last}}{{/required}}{{/vendorExtensions.x-request-body-param}} };
            return await CreateAsync(options, client);
        }
        #endif