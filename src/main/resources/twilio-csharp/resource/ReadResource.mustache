


        private static Request BuildReadRequest(Read{{resourceName}}Options options, ITwilioRestClient client)
        {
            {{>resource/GeneratePath}}

            return new Request(
                HttpMethod.Get,
                Rest.Domain.{{domainPackage}},
                path,
                queryParams: options.GetParams(),
                headerParams: {{^vendorExtensions.x-header-params-exists}}null{{/vendorExtensions.x-header-params-exists}}{{#vendorExtensions.x-header-params-exists}}options.GetHeaderParams(){{/vendorExtensions.x-header-params-exists}}
            );
        }

        public static ResourceSet<{{resourceName}}{{resourceConstant}}> Read(Read{{resourceName}}Options options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<{{resourceName}}{{resourceConstant}}>.FromJson("{{recordKey}}", response.Content);
            return new ResourceSet<{{resourceName}}{{resourceConstant}}>(page, options, client);
        }

        #if !NET35
        public static async System.Threading.Tasks.Task<ResourceSet<{{resourceName}}{{resourceConstant}}>> ReadAsync(Read{{resourceName}}Options options,
                                                                                             ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<{{resourceName}}{{resourceConstant}}>.FromJson("{{recordKey}}", response.Content);
            return new ResourceSet<{{resourceName}}{{resourceConstant}}>(page, options, client);
        }
        #endif

        public static ResourceSet<{{resourceName}}{{resourceConstant}}> Read({{#vendorExtensions.x-request-body-param}}
                                                     {{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}},{{/vendorExtensions.x-request-body-param}}
                                                     long? limit = null,
                                                     ITwilioRestClient client = null)
        {
            var options = new Read{{resourceName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}){ {{#vendorExtensions.x-request-body-param}}{{^required}}{{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}, {{/required}}{{/vendorExtensions.x-request-body-param}}Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        public static async System.Threading.Tasks.Task<ResourceSet<{{resourceName}}{{resourceConstant}}>> ReadAsync({{#vendorExtensions.x-request-body-param}}
                                                                                             {{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}},{{/vendorExtensions.x-request-body-param}}
                                                                                             long? limit = null,
                                                                                             ITwilioRestClient client = null)
        {
            var options = new Read{{resourceName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}){ {{#vendorExtensions.x-request-body-param}}{{^required}}{{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}, {{/required}}{{/vendorExtensions.x-request-body-param}}Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif
