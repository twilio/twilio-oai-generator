
        {{>Summary}}
        /// <param name="options"> Delete {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnComments}}
<<<<<<< HEAD
        private static {{requestName}}Request BuildDeleteRequest(Delete{{apiName}}Options options, {{clientName}} client)
        {
            {{>resource/GeneratePath}}
            return new {{requestName}}Request(
=======
        private static {{authMethod}}Request BuildDeleteRequest(Delete{{apiName}}Options options, {{restClientPrefix}}Twilio{{authMethod}}RestClient client)
        {
            {{>resource/GeneratePath}}
            return new {{authMethod}}Request(
>>>>>>> a326080 (orgs api uptake for twilio csharp)
                {{vendorExtensions.x-http-method}},
                Rest.Domain.{{domainPackage}},
                path,
                queryParams: options.GetParams(),
                headerParams: {{^vendorExtensions.hasOptionalHeaderParams}}null{{/vendorExtensions.hasOptionalHeaderParams}}{{#vendorExtensions.x-header-param-exists}}options.GetHeaderParams(){{/vendorExtensions.x-header-param-exists}}
            );
        }

        {{>Summary}}
        /// <param name="options"> Delete {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnComments}}
<<<<<<< HEAD
        public static bool Delete(Delete{{apiName}}Options options, {{clientName}} client = null)
        {
            client = client ?? {{domainClass}}.{{restClientMethodName}}();
=======
        public static bool Delete(Delete{{apiName}}Options options, {{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
        {
            client = client ?? Twilio{{domainClassPrefix}}Client.GetRestClient();
>>>>>>> a326080 (orgs api uptake for twilio csharp)
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        {{>Summary}}
        /// <param name="options"> Delete {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnCommentsAsync}}
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(Delete{{apiName}}Options options,
<<<<<<< HEAD
                                                                        {{clientName}} client = null)
        {
            client = client ?? {{domainClass}}.{{restClientMethodName}}();
=======
                                                                        {{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
        {
            client = client ?? Twilio{{domainClassPrefix}}Client.GetRestClient();
>>>>>>> a326080 (orgs api uptake for twilio csharp)
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        {{>Summary}}{{>resource/MethodsComments}}
        {{>resource/ReturnComments}}
<<<<<<< HEAD
        public static bool Delete({{#vendorExtensions.x-request-body-param}}{{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}}, {{/vendorExtensions.x-request-body-param}}{{clientName}} client = null)
=======
        public static bool Delete({{#vendorExtensions.x-request-body-param}}{{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}}, {{/vendorExtensions.x-request-body-param}}{{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
>>>>>>> a326080 (orgs api uptake for twilio csharp)
        {
            var options = new Delete{{apiName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}) {{#vendorExtensions.x-request-body-param}} {{^required}} { {{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}},{{/-last}} }{{/required}}  {{/vendorExtensions.x-request-body-param}} ;
            return Delete(options, client);
        }

        #if !NET35
        {{>Summary}}{{>resource/MethodsComments}}
        {{>resource/ReturnCommentsAsync}}
<<<<<<< HEAD
        public static async System.Threading.Tasks.Task<bool> DeleteAsync({{#vendorExtensions.x-request-body-param}}{{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}}, {{/vendorExtensions.x-request-body-param}}{{clientName}} client = null)
=======
        public static async System.Threading.Tasks.Task<bool> DeleteAsync({{#vendorExtensions.x-request-body-param}}{{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}}, {{/vendorExtensions.x-request-body-param}}{{restClientPrefix}}Twilio{{authMethod}}RestClient client = null)
>>>>>>> a326080 (orgs api uptake for twilio csharp)
        {
            var options = new Delete{{apiName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}) {{#vendorExtensions.x-request-body-param}}{{^required}} { {{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}},{{/-last}} }{{/required}}{{/vendorExtensions.x-request-body-param}};
            return await DeleteAsync(options, client);
        }
        #endif