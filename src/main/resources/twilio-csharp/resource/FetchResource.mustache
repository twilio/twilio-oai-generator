
        private static Request BuildFetchRequest(Fetch{{apiName}}Options options, ITwilioRestClient client)
        {
            {{>resource/GeneratePath}}
            return new Request(
                {{vendorExtensions.x-http-method}},
                Rest.Domain.{{domainPackage}},
                path,
                queryParams: options.GetParams(),
                headerParams: {{^vendorExtensions.x-header-param-exists}}null{{/vendorExtensions.x-header-param-exists}}{{#vendorExtensions.x-header-param-exists}}options.GetHeaderParams(){{/vendorExtensions.x-header-param-exists}}
            );
        }

        {{>Summary}}
        /// <param name="options"> Fetch {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnComments}}
        public static {{apiName}}Resource Fetch(Fetch{{apiName}}Options options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.{{restClientMethodName}}();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        {{>Summary}}
        /// <param name="options"> Fetch {{apiName}} parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        {{>resource/ReturnCommentsAsync}}
        public static async System.Threading.Tasks.Task<{{apiName}}Resource> FetchAsync(Fetch{{apiName}}Options options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.{{restClientMethodName}}();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        {{>Summary}}{{>resource/MethodsComments}}
        {{>resource/ReturnComments}}
        public static {{apiName}}{{resourceConstant}} Fetch({{#vendorExtensions.x-request-body-param}}
                                         {{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}}, {{/vendorExtensions.x-request-body-param}}
                                        ITwilioRestClient client = null)
        {
            var options = new Fetch{{apiName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}){ {{#vendorExtensions.x-request-body-param}}{{^required}}{{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}},{{/-last}}{{/required}}{{/vendorExtensions.x-request-body-param}} };
            return Fetch(options, client);
        }

        #if !NET35
        {{>Summary}}{{>resource/MethodsComments}}
        {{>resource/ReturnCommentsAsync}}
        public static async System.Threading.Tasks.Task<{{apiName}}{{resourceConstant}}> FetchAsync({{#vendorExtensions.x-request-body-param}}{{{dataType}}} {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^required}} = null{{/required}}, {{/vendorExtensions.x-request-body-param}}ITwilioRestClient client = null)
        {
            var options = new Fetch{{apiName}}Options({{#requiredParams}}{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/requiredParams}}){ {{#vendorExtensions.x-request-body-param}}{{^required}}{{paramName}} = {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}{{^-last}},{{/-last}}{{/required}}{{/vendorExtensions.x-request-body-param}} };
            return await FetchAsync(options, client);
        }
        #endif