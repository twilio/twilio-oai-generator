{{>licenseInfo}}
{{#resources}}
package com.twilio.rest.{{domainPackage}}.{{package}}{{packageSubPart}};

import com.twilio.base.Updater;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import java.time.format.DateTimeFormatter;
import com.twilio.converter.DateConverter;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
{{/fullJavaUtil}}

import lombok.ToString;


{{>model}}
{{#hasUpdate}}
{{#operations}}
{{#vendorExtensions.x-is-update-operation}}
public class {{resourceName}}Updater extends Updater<{{resourceName}}>{
{{#allParams}}
    private {{{dataType}}} {{paramName}};
{{/allParams}}

{{#signatureListUpdate}}
    public {{resourceName}}Updater({{#.}}final {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/.}}){
    {{#.}}
        this.{{paramName}} = {{paramName}};
    {{/.}}
    }
{{/signatureListUpdate}}

{{#vendorExtensions.x-non-path-params}}
    public {{resourceName}}Updater set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(final {{{dataType}}} {{paramName}}){
        this.{{paramName}} = {{paramName}};
        return this;
    }
{{/vendorExtensions.x-non-path-params}}

    @Override
    public {{resourceName}} update(final TwilioRestClient client){
        String path = "{{{path}}}";
        {{#allParams}}
        {{#vendorExtensions.x-is-account-sid}}
        this.{{paramName}} = this.{{paramName}} == null ? client.getAccountSid() : this.{{paramName}};
        path = path.replace("{"+"{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}"+"}", this.{{paramName}}.toString());
        {{/vendorExtensions.x-is-account-sid}}
        {{/allParams}}
        {{#requiredParams}}
        path = path.replace("{"+"{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}"+"}", this.{{paramName}}.toString());
        {{/requiredParams}}

        Request request = new Request(
            HttpMethod.POST,
            Domains.{{#lambda.uppercase}}{{domain}}{{/lambda.uppercase}}.toString(),
            path
        );
        {{#queryParams.0}}
        addQueryParams(request);
        {{/queryParams.0}}
        {{#formParams.0}}
        addPostParams(request);
        {{/formParams.0}}
        {{#headerParams.0}}
        addHeaderParams(request);
        {{/headerParams.0}}
        Response response = client.request(request);
        if (response == null) {
            throw new ApiConnectionException("{{resourceName}} update failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return {{resourceName}}.fromJson(response.getStream(), client.getObjectMapper());
    }
{{#formParams.0}}
{{>postParams}}
{{/formParams.0}}
{{#headerParams.0}}
{{>headerParams}}
{{/headerParams.0}}
{{#queryParams.0}}
{{>queryParams}}
{{/queryParams.0}}
}
{{/vendorExtensions.x-is-update-operation}}
{{/operations}}
{{/hasUpdate}}
{{/resources}}
