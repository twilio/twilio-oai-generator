{{>licenseInfo}}
{{#resources}}
package com.twilio.rest.{{domainPackage}}.{{package}}{{packageSubPart}};

import com.twilio.base.Creator;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.time.LocalDate;
import com.twilio.converter.Converter;
import java.time.ZonedDateTime;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
{{/fullJavaUtil}}

import lombok.ToString;


import java.net.URI;

{{>model}}
{{#hasCreate}}
{{#operations}}
{{#vendorExtensions.x-is-create-operation}}
public class {{resourceName}}Creator extends Creator<{{resourceName}}>{
{{#allParams}}
    private {{{dataType}}} {{paramName}};
{{/allParams}}
    public {{resourceName}}Creator({{#requiredParams}}final {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) {
    {{#requiredParams}}{{#required}}
        this.{{paramName}} = {{paramName}};
    {{/required}}{{/requiredParams}}
    }

{{#allParams}}
    public {{resourceName}}Creator set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(final {{{dataType}}} {{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}){
        this.{{paramName}} = {{paramName}};
        return this;
    }
{{/allParams}}

    @Override
    public {{resourceName}} create(final TwilioRestClient client){
        String path = "{{{path}}}";
        {{#requiredParams}}
        path = path.replace("{"+"{{paramName}}"+"}", this.{{paramName}}.toString());
        {{/requiredParams}}

        Request request = new Request(
            HttpMethod.POST,
            Domains.{{#lambda.uppercase}}{{domain}}{{/lambda.uppercase}}.toString(),
            path
        );

        addPostParams(request);
        Response response = client.request(request);
        if (response == null) {
            throw new ApiConnectionException("{{resourceName}} creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return {{resourceName}}.fromJson(response.getStream(), client.getObjectMapper());
    }


    private void addPostParams(final Request request) {
{{#allParams}}
        if ({{paramName}} != null) {
        {{#isFreeFormObject}}
        request.addPostParam("{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}",  Converter.mapToJson({{paramName}}));
        {{/isFreeFormObject}}
        {{^isFreeFormObject}}
        request.addPostParam("{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}", {{paramName}}.toString());
        {{/isFreeFormObject}}
        }

{{/allParams}}
    }
}
{{/vendorExtensions.x-is-create-operation}}
{{/operations}}
{{/hasCreate}}
{{/resources}}
