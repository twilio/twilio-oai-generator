{{>licenseInfo}}
{{#resources}}
package com.twilio.rest.{{domainPackage}}.{{apiVersion}}{{namespaceSubPart}};

import com.twilio.base.Reader;
import com.twilio.base.ResourceSet;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.converter.PrefixedCollapsibleMap;
import com.twilio.converter.Converter;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import com.twilio.base.Page;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URI;
import java.time.format.DateTimeFormatter;
import com.twilio.converter.DateConverter;

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
{{/fullJavaUtil}}

import lombok.ToString;

{{#apiOperations}}
{{#vendorExtensions.x-is-read-operation}}
public class {{apiName}}Reader extends Reader<{{apiName}}> {
{{#allParams}}
    private {{{dataType}}} {{paramName}};
{{/allParams}}

{{#vendorExtensions.x-signature-list}}
    public {{apiName}}Reader({{#.}}final {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/.}}){
    {{#.}}
        this.{{paramName}} = {{paramName}};
    {{/.}}
    }
{{/vendorExtensions.x-signature-list}}

{{#vendorExtensions.x-non-path-params}}
    public {{apiName}}Reader set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(final {{{dataType}}} {{paramName}}){
        this.{{paramName}} = {{paramName}};
        return this;
    }
{{#isArray}}
    public {{apiName}}Reader set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(final {{{baseType}}} {{paramName}}){
        return set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(Promoter.listOfOne({{paramName}}));
    }
{{/isArray}}
{{#vendorExtensions.x-promotions}}
{{#entrySet}}

    public {{apiName}}Reader set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(final {{#lambda.titlecase}}{{key}}{{/lambda.titlecase}} {{paramName}}){
        return set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}({{value}});
    }
{{/entrySet}}
{{/vendorExtensions.x-promotions}}
{{/vendorExtensions.x-non-path-params}}

    @Override
    public ResourceSet<{{apiName}}> read(final TwilioRestClient client) {
        return new ResourceSet<>(this, client, firstPage(client));
    }

    public Page<{{apiName}}> firstPage(final TwilioRestClient client) {
        String path = "{{{path}}}";
        {{#allParams}}
        {{#vendorExtensions.x-is-account-sid}}
        this.{{paramName}} = this.{{paramName}} == null ? client.getAccountSid() : this.{{paramName}};
        path = path.replace("{"+"{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}}"+"}", this.{{paramName}}.toString());
        {{/vendorExtensions.x-is-account-sid}}
        {{/allParams}}
        {{#requiredParams}}
        path = path.replace("{"+"{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}}"+"}", this.{{paramName}}.toString());
        {{/requiredParams}}

        Request request = new Request(
            HttpMethod.GET,
            Domains.{{#lambda.uppercase}}{{domainName}}{{/lambda.uppercase}}.toString(),
            path
        );

        {{#queryParams.0}}
        addQueryParams(request);
        {{/queryParams.0}}
        {{#formParams.0}}
        addPostParams(request);
        {{/formParams.0}}
        {{#headerParams.0}}
        addHeaderParams(request);
        {{/headerParams.0}}
        return pageForRequest(client, request);
    }

    private Page<{{apiName}}> pageForRequest(final TwilioRestClient client, final Request request) {
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("{{apiName}} read failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content", response.getStatusCode());
            }
            throw new ApiException(restException);
        }

        return Page.fromJson(
            "{{recordKey}}",
            response.getContent(),
            {{apiName}}.class,
            client.getObjectMapper()
        );
    }

    @Override
    public Page<{{apiName}}> previousPage(final Page<{{apiName}}> page, final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getPreviousPageUrl(Domains.{{#lambda.uppercase}}{{domainName}}{{/lambda.uppercase}}.toString())
        );
        return pageForRequest(client, request);
    }


    @Override
    public Page<{{apiName}}> nextPage(final Page<{{apiName}}> page, final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getNextPageUrl(Domains.{{#lambda.uppercase}}{{domainName}}{{/lambda.uppercase}}.toString())
        );
        return pageForRequest(client, request);
    }

    @Override
    public Page<{{apiName}}> getPage(final String targetUrl, final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            targetUrl
        );

        return pageForRequest(client, request);
    }
{{#formParams.0}}
{{>postParams}}
{{/formParams.0}}
{{#headerParams.0}}
{{>headerParams}}
{{/headerParams.0}}
{{#queryParams.0}}
    private void addQueryParams(final Request request) {
{{>queryParams}}
        if(getPageSize() != null) {
            request.addQueryParam("PageSize", Integer.toString(getPageSize()));
        }
    }
{{/queryParams.0}}
}
{{/vendorExtensions.x-is-read-operation}}
{{/apiOperations}}
{{/resources}}
