{{>licenseInfo}}

from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
{{#hasPaginationOperation}}
from twilio.base.page import Page
{{/hasPaginationOperation}}
{{#resources}}{{#dependents}}from twilio.rest.{{apiFilename}}.{{filename}} import {{importName}}{{/dependents}}{{/resources}}
{{#resources}}

class {{resourceName}}({{#isListResource}}ListResource{{/isListResource}}{{#isContextResource}}InstanceContext{{/isContextResource}}{{#isPageResource}}Page{{/isPageResource}}):
    def __init__(self, version: {{apiVersionClass}}{{#resourcePathParams}}, {{paramName}}: {{{dataType}}}{{/resourcePathParams}}):
        # TODO: needs autogenerated docs
        super({{resourceName}}List, self).__init__(version)

        # Path Solution
        self._solution = { {{#resourcePathParams}}{{paramName}}, {{/resourcePathParams}} }
        self._uri = '{{path}}'
        {{#dependents}}
        self._{{mountName}} = None{{/dependents}}
        {{#operations}}
        def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}{{/allParams}}):
            {{#vendorExtensions.x-is-create}}data = values.of({
                {{#allParams}}'{{paramName}}': {{paramName}},{{/allParams}}
            })

            payload = self._version.create(method='{{httpMethod}}', uri=self._uri, data=data, )

            return {{name}}Instance(self._version, payload, {{#resourcePathParams}}{{paramName}}=self._solution['{{paramName}}']{{/resourcePathParams}}){{/vendorExtensions.x-is-create}}
            {{#vendorExtensions.x-is-update}}data = values.of({
                {{#allParams}}'{{paramName}}': {{paramName}},{{/allParams}}
            })

            payload = self._version.update(method='{{httpMethod}}', uri=self._uri, data=data, )

            return {{name}}Instance(self._version, payload, {{#resourcePathParams}}{{paramName}}=self._solution['{{paramName}}'], {{/resourcePathParams}}){{/vendorExtensions.x-is-update}}
            {{#vendorExtensions.x-is-fetch}}"""
            Fetch the {{name}}Instance

            :returns: The fetched {{name}}Instance
            #TODO: add rtype docs
            """
            payload = self._version.fetch(method='GET', uri=self._uri, )
            return {{name}}Instance(
                self._version,
                payload,
                {{#resourcePathParams}}{{paramName}}{{/resourcePathParams}}=self._solution[{{#resourcePathParams}}'{{paramName}}'{{/resourcePathParams}}],
            )
            {{/vendorExtensions.x-is-fetch}}
            {{#vendorExtensions.x-is-delete}}"""
            Deletes the {{name}}Instance

            :returns: True if delete succeeds, False otherwise
            :rtype: bool
            """
            return self._version.delete(method='DELETE', uri=self._uri, ){{/vendorExtensions.x-is-delete}}
            {{#vendorExtensions.x-is-page}}data = values.of({
                {{#allParams}}'{{paramName}}': {{paramName}},{{/allParams}}
            })

            payload = self._version.create(method='{{httpMethod}}', uri=self._uri, data=data, )

            return {{name}}Page(self._version, payload, {{#resourcePathParams}}{{paramName}}=self._solution['{{paramName}}']{{/resourcePathParams}}){{/vendorExtensions.x-is-page}}
        {{/operations}}

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.{{apiVersionClass}}.{{resourceName}}>'

{{#responseModel}}
class {{name}}Instance(InstanceResource):
    def __init__(self, version, payload{{#resourcePathParams}}, {{paramName}}: {{{dataType}}}{{/resourcePathParams}}):
        super({{name}}Instance, self).__init__(version)
        self._properties = { {{#vars}}
            '{{name}}' = payload.get('{{{baseName}}}'),{{/vars}}
        }

        self._context = None
        self._solution = {
            {{#resourcePathParams}}'{{paramName}}': {{paramName}} or self._properties['{{paramName}}']{{/resourcePathParams}}
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = {{name}}Context(
                self._version,
                {{#resourcePathParams}}{{paramName}}=self._solution['{{paramName}}'],{{/resourcePathParams}}
            )
        return self._context

    {{#dependents}}@property
    def {{mountName}}(self):
        return self._proxy.{{mountName}}
    {{/dependents}}

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.{{apiVersionClass}}.{{name}}Instance {}>'.format(context)

{{/responseModel}}
{{/resources}}
