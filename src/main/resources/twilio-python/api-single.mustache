{{>licenseInfo}}
{{#resources}}
from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
{{#hasPaginationOperation}}from twilio.base.page import Page{{/hasPaginationOperation}}
{{#dependents}}from twilio.rest.{{domainPackage}}.{{apiVersion}}.{{apiFilename}}.{{mountName}} import {{resourceName}}List
{{/dependents}}

class {{apiName}}List(ListResource):

    def __init__(self, version: Version{{#listPathParams}}, {{paramName}}: {{{dataType}}}{{/listPathParams}}):
        """
        Initialize the {{apiName}}List
        :param Version version: Version that contains the resource
        {{#listPathParams}}:param {{paramName}}: {{{description}}}
        {{/listPathParams}}
        :returns: twilio.{{domainPackage}}.{{apiVersion}}.{{apiFilename}}.{{mountName}}.{{apiName}}List
        :rtype: twilio.{{domainPackage}}.{{apiVersion}}.{{apiFilename}}.{{mountName}}.{{apiName}}List
        """
        super().__init__(version)

        # Path Solution
        self._solution = { {{#listPathParams}}'{{paramName}}': {{paramName}}, {{/listPathParams}} }
        self._uri = '{{listPath}}'.format(**self._solution)
{{#dependents}}{{^instanceDependent}}
        self._{{mountName}} = None{{/instanceDependent}}{{/dependents}}
{{>listOperations}}{{#dependents}}{{^instanceDependent}}
    @property
    def {{mountName}}(self):
        """
        Access the {{mountName}}

        :returns: twilio.rest.{{domainPackage}}.{{apiVersion}}.{{apiFilename}}.{{mountName}}.{{resourceName}}List
        :rtype: twilio.rest.{{domainPackage}}.{{apiVersion}}.{{apiFilename}}.{{mountName}}.{{resourceName}}List
        """
        if self._{{mountName}} is None:
            self._{{mountName}} = {{resourceName}}List(self._version{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}})
        return self.{{mountName}}
{{/instanceDependent}}{{/dependents}}
    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}List>'
{{#hasPaginationOperation}}{{>pagination}}{{/hasPaginationOperation}}
{{#instancePath}}
class {{apiName}}Context(InstanceContext):
    def __init__(self, version: Version{{#instancePathParams}}, {{paramName}}: {{{dataType}}}{{/instancePathParams}}):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { {{#instancePathParams}}'{{paramName}}': {{paramName}}, {{/instancePathParams}} }
        self._uri = '{{instancePath}}'
        {{#dependents}}{{#instanceDependent}}
        self._{{mountName}} = None{{/instanceDependent}}{{/dependents}}
    {{#operations}}{{#vendorExtensions.x-is-context-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}{{/allParams}}):
        {{#vendorExtensions.x-is-update-operation}}data = values.of({
            {{#allParams}}'{{paramName}}': {{paramName}},{{/allParams}}
        })

        payload = self._version.update(method='{{httpMethod}}', uri=self._uri, data=data, )

        return {{apiName}}Instance(self._version, payload, {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'], {{/instancePathParams}})
        {{/vendorExtensions.x-is-update-operation}}
        {{#vendorExtensions.x-is-fetch-operation}}"""
        Fetch the {{apiName}}Instance

        :returns: The fetched {{apiName}}Instance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return {{apiName}}Instance(self._version, payload, {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'], {{/instancePathParams}})
        {{/vendorExtensions.x-is-fetch-operation}}

        {{#vendorExtensions.x-is-delete-operation}}"""
        Deletes the {{apiName}}Instance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, ){{/vendorExtensions.x-is-delete-operation}}
    {{/vendorExtensions.x-is-context-operation}}{{/operations}}

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Context>'

{{/instancePath}}
{{#responseModel}}
class {{apiName}}Instance(InstanceResource):
    def __init__(self, version, payload{{#instancePathParams}}, {{paramName}}: {{{dataType}}}{{/instancePathParams}}):
        super().__init__(version)
        self._properties = { {{#vars}}
            '{{name}}' : payload.get('{{{baseName}}}'),{{/vars}}
        }

        self._context = None
        self._solution = {
            {{#instancePathParams}}'{{paramName}}': {{paramName}} or self._properties['{{paramName}}'],{{/instancePathParams}}
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = {{apiName}}Context(
                self._version,
                {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'],{{/instancePathParams}}
            )
        return self._context

    {{#dependents}}{{#instanceDependent}}@property
    def {{mountName}}(self):
        return self._proxy.{{mountName}}
    {{/instanceDependent}}{{/dependents}}

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Instance {}>'.format(context)

{{/responseModel}}
{{/resources}}
