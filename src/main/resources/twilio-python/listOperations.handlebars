{{#operations}}
    {{#vendorExtensions.x-is-create-operation}}
    def create(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Create the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: The created {{instanceName}}
        """
        {{#bodyParam}}data = {{paramName}}.to_dict(){{/bodyParam}}
        {{^bodyParam}}{{#hasParams}}data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: {{#startsWith baseType text='object'}}serialize.object(e){{else}}e{{/startsWith}}){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        }){{/hasParams}}{{/bodyParam}}
        {{#allParams}}{{#isHeaderParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isHeaderParam}}{{/allParams}}
        {{#allParams}}{{#isBodyParam}}headers = {"Content-Type": "application/json"}{{/isBodyParam}}{{/allParams}}
        payload = self._version.create(method='POST', uri=self._uri, {{#hasParams}}data=data,{{/hasParams}}{{#allParams}}{{#if isHeaderParam}} headers=headers{{/if}}{{#if isBodyParam}} headers=headers{{/if}}{{#if isQueryParam}}, params=params{{/if}}{{/allParams}})

        return {{instanceName}}(self._version, payload{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}})

    async def create_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronously create the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: The created {{instanceName}}
        """
        {{#bodyParam}}
        data = {{paramName}}.to_dict()
        headers = {"Content-Type": "application/json"}
        {{/bodyParam}}
        {{^bodyParam}}{{#hasParams}}data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: {{#startsWith baseType text='object'}}serialize.object(e){{else}}e{{/startsWith}}){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        }){{/hasParams}}{{/bodyParam}}
        {{#allParams}}{{#isHeaderParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isHeaderParam}}{{/allParams}}
        {{#allParams}}{{#isQueryParam}}params = values.of({'{{{baseName}}}': {{paramName}}, }){{/isQueryParam}}{{/allParams}}
        payload = await self._version.create_async(method='POST', uri=self._uri, {{#hasParams}}data=data,{{/hasParams}}{{#allParams}}{{#if isHeaderParam}} headers=headers{{/if}}{{#if isBodyParam}} headers=headers{{/if}}{{#if isQueryParam}}, params=params{{/if}}{{/allParams}})

        return {{instanceName}}(self._version, payload{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}})
    {{/vendorExtensions.x-is-create-operation}}{{^instancePath}}{{#vendorExtensions.x-is-fetch-operation}}
    def fetch(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronously fetch the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}{{/allParams}}
        :returns: The fetched {{instanceName}}
        """
        {{#allParams}}{{#isHeaderParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isHeaderParam}}{{/allParams}}
        {{#allParams}}{{#isQueryParam}}params = values.of({'{{{baseName}}}': {{paramName}}, }){{/isQueryParam}}{{/allParams}}
        payload = self._version.fetch(method='GET', uri=self._uri{{#allParams}}{{#if isHeaderParam}}, headers=headers{{/if}}{{#if isQueryParam}}, params=params{{/if}}{{/allParams}})

        return {{instanceName}}(self._version, payload{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}})

    async def fetch_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronously fetch the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}{{/allParams}}
        :returns: The fetched {{instanceName}}
        """
        {{#allParams}}{{#isHeaderParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isHeaderParam}}{{/allParams}}
        {{#allParams}}{{#isQueryParam}}params = values.of({'{{{baseName}}}': {{paramName}}, }){{/isQueryParam}}{{/allParams}}
        payload = await self._version.fetch_async(method='GET', uri=self._uri{{#allParams}}{{#if isHeaderParam}}, headers=headers{{/if}}{{#if isQueryParam}}, params=params{{/if}}{{/allParams}})

        return {{instanceName}}(self._version, payload{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}}){{/vendorExtensions.x-is-fetch-operation}}{{#vendorExtensions.x-is-delete-operation}}
    def delete(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Asynchronously delete the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}{{/allParams}}
        :returns: True if delete succeeds, False otherwise
        """
        {{#allParams}}{{#isHeaderParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isHeaderParam}}{{/allParams}}
        {{#allParams}}{{#isQueryParam}}params = values.of({'{{{baseName}}}': {{paramName}}, }){{/isQueryParam}}{{/allParams}}
        return self._version.delete(method='DELETE', uri=self._uri{{#allParams}}{{#if isHeaderParam}}, headers=headers{{/if}}{{#if isQueryParam}}, params=params{{/if}}{{/allParams}})

    async def delete_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Asynchronously delete the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}{{/allParams}}
        :returns: True if delete succeeds, False otherwise
        """
        {{#allParams}}{{#isHeaderParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isHeaderParam}}{{/allParams}}
        {{#allParams}}{{#isQueryParam}}params = values.of({'{{{baseName}}}': {{paramName}}, }){{/isQueryParam}}{{/allParams}}
        return await self._version.delete_async(method='DELETE', uri=self._uri{{#allParams}}{{#if isHeaderParam}}, headers=headers{{/if}}{{#if isQueryParam}}, params=params{{/if}}{{/allParams}}){{/vendorExtensions.x-is-delete-operation}}{{#vendorExtensions.x-is-update-operation}}
    def update(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Update the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: The created {{instanceName}}
        """
        data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        })
        {{#allParams}}{{^isFormParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isFormParam}}{{/allParams}}
        payload = self._version.update(method='POST', uri=self._uri, data=data,{{#allParams}}{{#if isFormParam}}{{else}} headers=headers{{/if}}{{/allParams}})

        return {{instanceName}}(self._version, payload{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}})

    async def update_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronously update the {{instanceName}}

        {{#allParams}}:param {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: The created {{instanceName}}
        """
        data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        })
        {{#allParams}}{{^isFormParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isFormParam}}{{/allParams}}
        payload = await self._version.update_async(method='POST', uri=self._uri, data=data,{{#allParams}}{{#if isFormParam}}{{else}} headers=headers{{/if}}{{/allParams}})

        return {{instanceName}}(self._version, payload{{#listPathParams}}, {{paramName}}=self._solution['{{paramName}}']{{/listPathParams}}){{/vendorExtensions.x-is-update-operation}}{{/instancePath}}{{#vendorExtensions.x-is-read-operation}}
    def stream(self, {{#allParams}}
        {{#startsWith paramName text='page_size'}}{{else}}{{paramName}}: Union[{{{dataType}}}, object] = values.unset,{{/startsWith}}{{/allParams}}
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[{{instanceName}}]:
        """
        Streams {{instanceName}} records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
        :param {{dataType}} {{paramName}}: {{{description}}}{{/startsWith}}{{/allParams}}
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page({{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
            {{paramName}}={{paramName}},{{/startsWith}}{{/allParams}}
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    async def stream_async(self, {{#allParams}}
        {{#startsWith paramName text='page_size'}}{{else}}{{paramName}}: Union[{{{dataType}}}, object] = values.unset,{{/startsWith}}{{/allParams}}
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[{{instanceName}}]:
        """
        Asynchronously streams {{instanceName}} records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
        :param {{dataType}} {{paramName}}: {{{description}}}{{/startsWith}}{{/allParams}}
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async({{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
            {{paramName}}={{paramName}},{{/startsWith}}{{/allParams}}
            page_size=limits['page_size']
        )

        return self._version.stream_async(page, limits['limit'])

    def list(self, {{#allParams}}
        {{#startsWith paramName text='page_size'}}{{else}}{{paramName}}: Union[{{{dataType}}}, object] = values.unset,{{/startsWith}}{{/allParams}}
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[{{instanceName}}]:
        """
        Lists {{instanceName}} records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
        :param {{dataType}} {{paramName}}: {{{description}}}{{/startsWith}}{{/allParams}}
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(self.stream(
            {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}{{paramName}}={{paramName}},
            {{/startsWith}}{{/allParams}}limit=limit,
            page_size=page_size,
        ))

    async def list_async(self, {{#allParams}}
        {{#startsWith paramName text='page_size'}}{{else}}{{paramName}}: Union[{{{dataType}}}, object] = values.unset,{{/startsWith}}{{/allParams}}
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[{{instanceName}}]:
        """
        Asynchronously lists {{instanceName}} records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
        :param {{dataType}} {{paramName}}: {{{description}}}{{/startsWith}}{{/allParams}}
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [record async for record in await self.stream_async(
            {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}{{paramName}}={{paramName}},
            {{/startsWith}}{{/allParams}}limit=limit,
            page_size=page_size,
        )]

    def page(self, {{#allParams}}
        {{#startsWith paramName text='page_size'}}{{else}}{{paramName}}: Union[{{{dataType}}}, object] = values.unset,{{/startsWith}}{{/allParams}}
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> {{apiName}}Page:
        """
        Retrieve a single page of {{instanceName}} records from the API.
        Request is executed immediately
        {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
        :param {{paramName}}: {{{description}}}{{/startsWith}}{{/allParams}}
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of {{instanceName}}
        """
        data = values.of({ {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/startsWith}}{{/allParams}}
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data)
        return {{apiName}}Page(self._version, response{{#if listPathParams}}, self._solution{{/if}})

    async def page_async(self, {{#allParams}}
        {{#startsWith paramName text='page_size'}}{{else}}{{paramName}}: Union[{{{dataType}}}, object] = values.unset,{{/startsWith}}{{/allParams}}
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> {{apiName}}Page:
        """
        Asynchronously retrieve a single page of {{instanceName}} records from the API.
        Request is executed immediately
        {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
        :param {{paramName}}: {{{description}}}{{/startsWith}}{{/allParams}}
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of {{instanceName}}
        """
        data = values.of({ {{#allParams}}{{#startsWith paramName text='page_size'}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/startsWith}}{{/allParams}}
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = await self._version.page_async(method='GET', uri=self._uri, params=data)
        return {{apiName}}Page(self._version, response{{#if listPathParams}}, self._solution{{/if}})

    def get_page(self, target_url: str) -> {{apiName}}Page:
        """
        Retrieve a specific page of {{instanceName}} records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of {{instanceName}}
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url
        )
        return {{apiName}}Page(self._version, response{{#if listPathParams}}, self._solution{{/if}})

    async def get_page_async(self, target_url: str) -> {{apiName}}Page:
        """
        Asynchronously retrieve a specific page of {{instanceName}} records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of {{instanceName}}
        """
        response = await self._version.domain.twilio.request_async(
            'GET',
            target_url
        )
        return {{apiName}}Page(self._version, response{{#if listPathParams}}, self._solution{{/if}})
{{/vendorExtensions.x-is-read-operation}}{{/operations}}
