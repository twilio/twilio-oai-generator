class {{instanceName}}(InstanceResource):
{{>model}}
    """{{#vars}}
    :ivar {{name}}: {{{description}}}{{/vars}}
    """

    def __init__(self, version: Version, payload: Dict[str, Any]{{#instancePathParams}}, {{paramName}}: {{#if vendorExtensions.x-is-parent-param}}{{{contentType}}}{{else}}Optional[{{{contentType}}}] = None{{/if}}{{/instancePathParams}}):
        super().__init__(version)

        {{#vars}}
        self.{{name}}: Optional[{{{baseType}}}] = {{#if vendorExtensions.x-deserialize}}{{vendorExtensions.x-deserialize}}(payload.get("{{{baseName}}}")){{else}}payload.get("{{{baseName}}}"){{/if}}{{/vars}}

        {{#if instancePathParams}}
        self._solution = { {{#instancePathParams}}
            "{{paramName}}": {{paramName}}{{#unless vendorExtensions.x-is-parent-param}} or self.{{paramName}}{{/unless}},{{/instancePathParams}}
        }{{/if}}
        {{#instancePath}}self._context: Optional[{{apiName}}Context] = None

    @property
    def _proxy(self) -> "{{apiName}}Context":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: {{apiName}}Context for this {{instanceName}}
        """
        if self._context is None:
            self._context = {{apiName}}Context(self._version,{{#instancePathParams}} {{paramName}}=self._solution['{{paramName}}'],{{/instancePathParams}})
        return self._context{{/instancePath}}
    {{#operations}}{{#vendorExtensions.x-is-context-operation}}
    {{#vendorExtensions.x-is-update-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> "{{instanceName}}":
        """
        Update the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The updated {{instanceName}}
        """
        return self._proxy.update({{#allParams}}{{paramName}}={{paramName}}, {{/allParams}})

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> "{{instanceName}}":
        """
        Asynchronous coroutine to update the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The updated {{instanceName}}
        """
        return await self._proxy.update_async({{#allParams}}{{paramName}}={{paramName}}, {{/allParams}})
    {{/vendorExtensions.x-is-update-operation}}{{#vendorExtensions.x-is-fetch-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> "{{instanceName}}":
        """
        Fetch the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The fetched {{instanceName}}
        """
        return self._proxy.fetch({{#allParams}}{{paramName}}={{paramName}}, {{/allParams}})

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> "{{instanceName}}":
        """
        Asynchronous coroutine to fetch the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The fetched {{instanceName}}
        """
        return await self._proxy.fetch_async({{#allParams}}{{paramName}}={{paramName}}, {{/allParams}})
    {{/vendorExtensions.x-is-fetch-operation}}{{#vendorExtensions.x-is-delete-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Deletes the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete({{#allParams}}{{paramName}}={{paramName}}, {{/allParams}})
    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Asynchronous coroutine that deletes the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async({{#allParams}}{{paramName}}={{paramName}}, {{/allParams}})
    {{/vendorExtensions.x-is-delete-operation}}{{#vendorExtensions.x-is-create-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> "{{instanceName}}":
        """
        Create the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The created {{instanceName}}
        """
        return self._proxy.create({{#allParams}}{{paramName}}{{#if required}}{{else}}={{paramName}}{{/if}}, {{/allParams}})
    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> "{{instanceName}}":
        """
        Asynchronous coroutine to create the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The created {{instanceName}}
        """
        return await self._proxy.create_async({{#allParams}}{{paramName}}{{#if required}}{{else}}={{paramName}}{{/if}}, {{/allParams}})
    {{/vendorExtensions.x-is-create-operation}}{{/vendorExtensions.x-is-context-operation}}{{/operations}}{{#dependents}}{{#instanceDependent}}
    @property
    def {{mountName}}(self) -> {{listName}}:
        """
        Access the {{mountName}}
        """
        return self._proxy.{{mountName}}
    {{/instanceDependent}}{{/dependents}}
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        {{#if instancePathParams}}context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items()){{/if}}
        return '<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Instance{{#if instancePathParams}} {}>'.format(context){{else}}>'{{/if}}
