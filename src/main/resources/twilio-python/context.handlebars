class {{apiName}}Context(InstanceContext):

    def __init__(self, version: Version{{#instancePathParams}}, {{paramName}}: {{{dataType}}}{{/instancePathParams}}):
        """
        Initialize the {{apiName}}Context

        :param version: Version that contains the resource{{#instancePathParams}}
        :param {{paramName}}: {{{description}}}{{/instancePathParams}}
        """
        super().__init__(version)

        {{#if instancePathParams}}
        # Path Solution
        self._solution = { {{#instancePathParams}}
            '{{paramName}}': {{paramName}},{{/instancePathParams}}
        }{{/if}}
        self._uri = '{{instancePath}}'{{#if instancePathParams}}.format(**self._solution){{/if}}
        {{#dependents}}{{#instanceDependent}}
        self._{{mountName}}: Optional[{{listName}}] = None{{/instanceDependent}}{{/dependents}}
    {{#operations}}{{#vendorExtensions.x-is-context-operation}}
    {{#vendorExtensions.x-is-update-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Update the {{instanceName}}
        {{#allParams}}
        :param {{{dataType}}} {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The updated {{instanceName}}
        """
        data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        })
        {{#allParams}}{{^isFormParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isFormParam}}{{/allParams}}

        payload = self._version.update(method='POST', uri=self._uri, data=data,{{#allParams}}{{#if isFormParam}}{{else}} headers=headers{{/if}}{{/allParams}})

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronous coroutine to update the {{instanceName}}
        {{#allParams}}
        :param {{{dataType}}} {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The updated {{instanceName}}
        """
        data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        })
        {{#allParams}}{{^isFormParam}}headers = values.of({'{{{baseName}}}': {{paramName}}, }){{/isFormParam}}{{/allParams}}

        payload = await self._version.update_async(method='POST', uri=self._uri, data=data,{{#allParams}}{{#if isFormParam}}{{else}} headers=headers{{/if}}{{/allParams}})

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )
    {{/vendorExtensions.x-is-update-operation}}{{#vendorExtensions.x-is-fetch-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Fetch the {{instanceName}}
        {{#allParams}}
        :param {{{dataType}}} {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The fetched {{instanceName}}
        """
        {{#if allParams}}
        data = values.of({ {{#allParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/allParams}}
        })
        {{#allParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}data.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/allParams}}{{/if}}
        payload = self._version.fetch(method='GET', uri=self._uri, {{#if allParams}}params=data{{/if}})

        return {{instanceName}}(
            self._version,
            payload,
            {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'],
            {{/instancePathParams}}
        )

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronous coroutine to fetch the {{instanceName}}
        {{#allParams}}
        :param {{{dataType}}} {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The fetched {{instanceName}}
        """
        {{#if allParams}}
        data = values.of({ {{#allParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/allParams}}
        })
        {{#allParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}data.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/allParams}}{{/if}}
        payload = await self._version.fetch_async(method='GET', uri=self._uri, {{#if allParams}}params=data{{/if}})

        return {{instanceName}}(
            self._version,
            payload,
            {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'],
            {{/instancePathParams}}
        )
    {{/vendorExtensions.x-is-fetch-operation}}{{#vendorExtensions.x-is-delete-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Deletes the {{apiName}}Instance

        {{#allParams}}:param {{dataType}} {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: True if delete succeeds, False otherwise
        """{{#if allParams}}
        headers = values.of({{#allParams}}{'{{{baseName}}}': {{paramName}}, }{{/allParams}})
        {{/if}}
        return self._version.delete(method='DELETE', uri=self._uri,{{#if allParams}} headers=headers{{/if}})

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Asynchronous coroutine that deletes the {{apiName}}Instance

        {{#allParams}}:param {{dataType}} {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: True if delete succeeds, False otherwise
        """{{#if allParams}}
        headers = values.of({{#allParams}}{'{{{baseName}}}': {{paramName}}, }{{/allParams}})
        {{/if}}
        return await self._version.delete_async(method='DELETE', uri=self._uri,{{#if allParams}} headers=headers{{/if}})
    {{/vendorExtensions.x-is-delete-operation}}{{#vendorExtensions.x-is-create-operation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Create the {{instanceName}}
        {{#allParams}}
        :param {{dataType}} {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The created {{instanceName}}
        """
        data = values.of({ {{#allParams}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/allParams}}
        })

        payload = self._version.create(method='POST', uri=self._uri, data=data)

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}{{#if required}}{{else}}=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronous coroutine to create the {{instanceName}}
        {{#allParams}}
        :param {{dataType}} {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The created {{instanceName}}
        """
        data = values.of({ {{#allParams}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/allParams}}
        })

        payload = await self._version.create_async(method='POST', uri=self._uri, data=data)

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )
    {{/vendorExtensions.x-is-create-operation}}{{/vendorExtensions.x-is-context-operation}}{{/operations}}
    {{#dependents}}{{#instanceDependent}}
    @property
    def {{mountName}}(self) -> {{listName}}:
        """
        Access the {{mountName}}
        """
        if self._{{mountName}} is None:
            self._{{mountName}} = {{listName}}(
                self._version, {{#instancePathParams}}
                self._solution['{{paramName}}'],{{/instancePathParams}}
            )
        return self._{{mountName}}
    {{/instanceDependent}}{{/dependents}}
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        {{#if instancePathParams}}context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items()){{/if}}
        return '<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Context{{#if instancePathParams}} {}>'.format(context){{else}}>'{{/if}}
