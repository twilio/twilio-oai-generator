class {{apiName}}Context(InstanceContext):
{{#if nestedModels}}{{>modelClasses}}{{/if}}
    def __init__(self, version: Version{{#instancePathParams}}, {{paramName}}: {{{dataType}}}{{/instancePathParams}}):
        """
        Initialize the {{apiName}}Context

        :param version: Version that contains the resource{{#instancePathParams}}
        :param {{paramName}}: {{{description}}}{{/instancePathParams}}
        """
        super().__init__(version)

        {{#if instancePathParams}}
        # Path Solution
        self._solution = { {{#instancePathParams}}
            '{{paramName}}': {{paramName}},{{/instancePathParams}}
        }{{/if}}
        self._uri = '{{instancePath}}'{{#if instancePathParams}}.format(**self._solution){{/if}}
        {{#dependents}}{{#instanceDependent}}
        self._{{mountName}}: Optional[{{listName}}] = None{{/instanceDependent}}{{/dependents}}
    {{#operations}}{{#vendorExtensions.x-is-context-operation}}
    {{#vendorExtensions.x-is-update-operation}}{{^vendorExtensions.x-twilio.ignoreOperation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Update the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The updated {{instanceName}}
        """
        {{#bodyParam}}data = {{paramName}}.to_dict(){{/bodyParam}}
        {{^bodyParam}}data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        }){{/bodyParam}}
        headers = values.of({})
        {{#headerParams}}
        {{^if required}}
        if not ({{paramName}} is values.unset or (isinstance({{paramName}}, str) and not {{paramName}})):{{/if}}
            headers['{{{baseName}}}'] = {{paramName}}{{/headerParams}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}{{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}

        payload = self._version.update(method='{{vendorExtensions.x-http-method}}', uri=self._uri, data=data, headers=headers{{#if queryParams}}, params=params{{/if}})

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronous coroutine to update the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The updated {{instanceName}}
        """
        {{#bodyParam}}data = {{paramName}}.to_dict(){{/bodyParam}}
        {{^bodyParam}}data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        }){{/bodyParam}}
        headers = values.of({})
        {{#headerParams}}
        {{^if required}}
        if not ({{paramName}} is values.unset or (isinstance({{paramName}}, str) and not {{paramName}})):{{/if}}
            headers['{{{baseName}}}'] = {{paramName}}
        {{/headerParams}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}{{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}

        payload = await self._version.update_async(method='{{vendorExtensions.x-http-method}}', uri=self._uri, data=data, headers=headers{{#if queryParams}}, params=params{{/if}})

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )
    {{/vendorExtensions.x-twilio.ignoreOperation}}{{/vendorExtensions.x-is-update-operation}}{{#vendorExtensions.x-is-fetch-operation}}{{^vendorExtensions.x-twilio.ignoreOperation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Fetch the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The fetched {{instanceName}}
        """
        {{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}

        headers = values.of({})
        {{#headerParams}}
        {{^if required}}
        if not ({{paramName}} is values.unset or (isinstance({{paramName}}, str) and not {{paramName}})):{{/if}}
            headers['{{{baseName}}}'] = {{paramName}}
        {{/headerParams}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}
        payload = self._version.fetch(method='{{vendorExtensions.x-http-method}}', uri=self._uri {{#if queryParams}}, params=params{{/if}} , headers=headers)

        return {{instanceName}}(
            self._version,
            payload,
            {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'],
            {{/instancePathParams}}
        )

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronous coroutine to fetch the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The fetched {{instanceName}}
        """
        {{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}

        headers = values.of({})
        {{#headerParams}}
        {{^if required}}
        if not ({{paramName}} is values.unset or (isinstance({{paramName}}, str) and not {{paramName}})):{{/if}}
            headers['{{{baseName}}}'] = {{paramName}}
        {{/headerParams}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}
        payload = await self._version.fetch_async(method='{{vendorExtensions.x-http-method}}', uri=self._uri {{#if queryParams}}, params=params{{/if}}, headers=headers)

        return {{instanceName}}(
            self._version,
            payload,
            {{#instancePathParams}}{{paramName}}=self._solution['{{paramName}}'],
            {{/instancePathParams}}
        )
    {{/vendorExtensions.x-twilio.ignoreOperation}}{{/vendorExtensions.x-is-fetch-operation}}{{#vendorExtensions.x-is-delete-operation}}{{^vendorExtensions.x-twilio.ignoreOperation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Deletes the {{apiName}}Instance

        {{#allParams}}:param {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: True if delete succeeds, False otherwise
        """{{#if headerParams}}
        headers = values.of({{#headerParams}}{'{{{baseName}}}': {{paramName}}, }{{/headerParams}})
        {{/if}}

        {{^if headerParams}}
        headers = values.of({})
        {{/if}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}{{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}
        return self._version.delete(method='{{vendorExtensions.x-http-method}}', uri=self._uri, headers=headers{{#if queryParams}}, params=params{{/if}})

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> bool:
        """
        Asynchronous coroutine that deletes the {{apiName}}Instance

        {{#allParams}}:param {{paramName}}: {{{description}}}
        {{/allParams}}
        :returns: True if delete succeeds, False otherwise
        """{{#if headerParams}}
        headers = values.of({{#headerParams}}{'{{{baseName}}}': {{paramName}}, }{{/headerParams}})
        {{/if}}
        {{^if headerParams}}
        headers = values.of({})
        {{/if}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}{{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}
        return await self._version.delete_async(method='{{vendorExtensions.x-http-method}}', uri=self._uri, headers=headers{{#if queryParams}}, params=params{{/if}})
    {{/vendorExtensions.x-twilio.ignoreOperation}}{{/vendorExtensions.x-is-delete-operation}}{{#vendorExtensions.x-is-create-operation}}{{^vendorExtensions.x-twilio.ignoreOperation}}
    def {{vendorExtensions.x-name-lower}}(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Create the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The created {{instanceName}}
        """
        {{#bodyParam}}data = {{paramName}}.to_dict(){{/bodyParam}}
        {{^bodyParam}}data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        }){{/bodyParam}}
        headers = values.of({})
        {{#headerParams}}
        {{^if required}}
        if not ({{paramName}} is values.unset or (isinstance({{paramName}}, str) and not {{paramName}})):{{/if}}
            headers['{{{baseName}}}'] = {{paramName}}{{/headerParams}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}{{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}

        payload = self._version.create(method='{{vendorExtensions.x-http-method}}', uri=self._uri, data=data, headers=headers{{#if queryParams}}, params=params{{/if}})

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )

    async def {{vendorExtensions.x-name-lower}}_async(self{{#allParams}}, {{paramName}}: {{#if required}}{{{dataType}}}{{else}}Union[{{{dataType}}}, object]=values.unset{{/if}}{{/allParams}}) -> {{instanceName}}:
        """
        Asynchronous coroutine to create the {{instanceName}}
        {{#allParams}}
        :param {{paramName}}: {{{description}}}{{/allParams}}

        :returns: The created {{instanceName}}
        """
        {{#bodyParam}}data = {{paramName}}.to_dict(){{/bodyParam}}
        {{^bodyParam}}data = values.of({ {{#allParams}}{{#isFormParam}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/isFormParam}}{{/allParams}}
        }){{/bodyParam}}
        headers = values.of({})
        {{#headerParams}}
        {{^if required}}
        if not ({{paramName}} is values.unset or (isinstance({{paramName}}, str) and not {{paramName}})):{{/if}}
            headers['{{{baseName}}}'] = {{paramName}}{{/headerParams}}
        {{#consumes}}
        headers["Content-Type"] = "{{{mediaType}}}"
        {{/consumes}}
        {{#vendorExtensions.successProduce}}
        headers["Accept"] = "{{{mediaType}}}"
        {{/vendorExtensions.successProduce}}{{#if queryParams}}
        params = values.of({ {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}{{else}}
            '{{{baseName}}}': {{#if vendorExtensions.x-serialize}}{{vendorExtensions.x-serialize}}({{paramName}}{{#if isArray}}, lambda e: e){{else}}){{/if}}{{else}}{{paramName}}{{/if}},{{/if}}{{/queryParams}}
        })

        {{#queryParams}}{{#if vendorExtensions.x-prefixed-collapsible-map}}params.update({{vendorExtensions.x-serialize}}({{paramName}}, '{{vendorExtensions.x-prefixed-collapsible-map}}'))
        {{/if}}{{/queryParams}}{{/if}}

        payload = await self._version.create_async(method='{{vendorExtensions.x-http-method}}', uri=self._uri, data=data, headers=headers{{#if queryParams}}, params=params{{/if}})

        return {{instanceName}}(
            self._version,
            payload{{#instancePathParams}},
            {{paramName}}=self._solution['{{paramName}}']{{/instancePathParams}}
        )
    {{/vendorExtensions.x-twilio.ignoreOperation}}{{/vendorExtensions.x-is-create-operation}}{{/vendorExtensions.x-is-context-operation}}{{/operations}}
    {{#dependents}}{{#instanceDependent}}
    @property
    def {{mountName}}(self) -> {{listName}}:
        """
        Access the {{mountName}}
        """
        if self._{{mountName}} is None:
            self._{{mountName}} = {{listName}}(
                self._version, {{#instancePathParams}}
                self._solution['{{paramName}}'],{{/instancePathParams}}
            )
        return self._{{mountName}}
    {{/instanceDependent}}{{/dependents}}
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        {{#if instancePathParams}}context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items()){{/if}}
        return '<Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Context{{#if instancePathParams}} {}>'.format(context){{else}}>'{{/if}}
