{{#resources}}
<?php

{{>licenseInfo}}

namespace Twilio\Rest\Api\V2010;

{{>imports}}

/**
{{#responseModels}}
 * @property {{{dataType}}} ${{baseName}}
{{/responseModels}}
 */

class {{apiName}}Instance extends InstanceResource {
    /**
     * Initialize the {{apiName}}Instance
     *
     * @param Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     */
    public function __construct(Version $version, array $payload) {
        parent::__construct($version);

        // Marshaled Properties
        $this->properties = [
            {{#responseModels}}
            '{{baseName}}' => Values::array_get($payload, '{{name}}'),
            {{/responseModels}}
        ];

        $this->solution = [];
    }

    /**
    * Generate an instance context for the instance, the context is capable of
    * performing various actions.  All instance actions are proxied to the context
    *
    * @return FeedbackContext Context for this FeedbackInstance
    */
    protected function proxy(): {{apiName}}Context {
        if (!$this->context) {
            $this->context = new {{apiName}}Context($this->version );
        }
        return $this->context;
    }

    /**
    * Fetch the {{apiName}}Instance
    *
    * @return {{apiName}}Instance Fetched {{apiName}}Instance
    * @throws TwilioException When an HTTP error occurs.
    */
    public function fetch(): {{apiName}}Instance {
        return $this->proxy()->fetch();
    }

    /**
    * Create the {{apiName}}Instance
    *
    * @param int $qualityScore The call quality expressed as an integer from 1 to 5
    * @param array|Options $options Optional Arguments
    * @return {{apiName}}Instance Created {{apiName}}Instance
    * @throws TwilioException When an HTTP error occurs.
    */
    public function create(int $qualityScore, array $options = []): {{apiName}}Instance {
        return $this->proxy()->create($qualityScore, $options);
    }

    /**
    * Update the {{apiName}}Instance
    *
    * @param array|Options $options Optional Arguments
    * @return {{apiName}}Instance Updated {{apiName}}Instance
    * @throws TwilioException When an HTTP error occurs.
    */
    public function update(array $options = []): FeedbackInstance {
        return $this->proxy()->update($options);
    }
    /**
    * Magic getter to access properties
    *
    * @param string $name Property to access
    * @return mixed The requested property
    * @throws TwilioException For unknown properties
    */
    public function __get(string $name) {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }

        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->$method();
        }

        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.{{domainName}}.{{version}}.{{apiName}}Instance ' . \implode(' ', $context) . ']';
    }
}

{{/resources}}
