{{#resources}}
<?php

{{>licenseInfo}}

namespace Twilio\Rest\{{domainName}}\{{version}}{{namespaceSubPart}};

{{>imports}}

{{#responseModels.0}}
/**
{{#responseModels}}
 * @property {{{dataType}}} ${{baseName}}
{{/responseModels}}
 */
{{/responseModels.0}}

class {{apiName}}Instance extends InstanceResource {
{{#apiOperations}}
    {{^vendorExtensions.x-is-create-operation}}
    {{^vendorExtensions.x-is-read-operation}}
    {{#vendorExtensions.importProperties}}
    protected $_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    {{#-last}}

    {{/-last}}
    {{/vendorExtensions.importProperties}}
    {{/vendorExtensions.x-is-read-operation}}
    {{/vendorExtensions.x-is-create-operation}}
{{/apiOperations}}
    /**
     * Initialize the {{apiName}}Instance
     *
     * @param Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     {{#requiredPathParams}}
     * @param {{{dataType}}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} {{description}}
     {{/requiredPathParams}}
     */
    public function __construct(Version $version, array $payload{{#requiredPathParams}}{{#vendorExtensions.x-is-parent-param}}, {{{dataType}}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}{{/vendorExtensions.x-is-parent-param}}{{^vendorExtensions.x-is-parent-param}}, {{{dataType}}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} = null{{/vendorExtensions.x-is-parent-param}}{{/requiredPathParams}}) {
        parent::__construct($version);

    {{#responseModels.0}}
        // Marshaled Properties
        $this->properties = [
            {{#responseModels}}
            '{{baseName}}' => Values::array_get($payload, '{{name}}'),
            {{/responseModels}}
        ];

    {{/responseModels.0}}
        $this->solution = [{{#requiredPathParams}}{{#vendorExtensions.x-is-parent-param}}'{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}' => ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}, {{/vendorExtensions.x-is-parent-param}}{{^vendorExtensions.x-is-parent-param}}'{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}' => ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} ?: $this->properties['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], {{/vendorExtensions.x-is-parent-param}}{{/requiredPathParams}}];
    }

{{#metaProperties.x-is-context-operation}}
    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return {{apiName}}Context Context for this {{apiName}}Instance
     */
    protected function proxy(): {{apiName}}Context {
        if (!$this->context) {
            $this->context = new {{apiName}}Context(
                $this->version{{#requiredPathParams.0}},{{/requiredPathParams.0}}
                {{#requiredPathParams}}
                $this->solution['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']{{^-last}},{{/-last}}
                {{/requiredPathParams}}
            );
        }

        return $this->context;
    }

{{/metaProperties.x-is-context-operation}}
{{#apiOperations}}
{{#vendorExtensions.x-is-fetch-operation}}
    /**
     * Fetch the {{apiName}}Instance
     *
     {{#queryParams.0}}
     * @param array|Options $options Optional Arguments
     {{/queryParams.0}}
     {{#headerParams.0}}
     * @param array|Options $options Optional Arguments
     {{/headerParams.0}}
     * @return {{apiName}}Instance Fetched {{apiName}}Instance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch({{#queryParams.0}}array $options = []{{/queryParams.0}}{{#headerParams.0}}array $options = []{{/headerParams.0}}): {{apiName}}Instance {
        return $this->proxy()->fetch({{#queryParams.0}}$options{{/queryParams.0}}{{#headerParams.0}}$options{{/headerParams.0}});
    }

{{/vendorExtensions.x-is-fetch-operation}}
{{#vendorExtensions.x-is-delete-operation}}
    /**
     * Delete the {{apiName}}Instance
     *
     {{#headerParams.0}}
     * @param array|Options $options Optional Arguments
     {{/headerParams.0}}
     * @return bool True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete({{#headerParams.0}}array $options = []{{/headerParams.0}}): bool {
        return $this->proxy()->delete({{#headerParams.0}}$options{{/headerParams.0}});
    }

{{/vendorExtensions.x-is-delete-operation}}
{{#vendorExtensions.x-is-update-operation}}
    /**
     * Update the {{apiName}}Instance
     *
     {{#requiredParams}}
     {{#isFormParam}}
     * @param {{dataType}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} {{description}}
     {{/isFormParam}}
     {{/requiredParams}}
     {{#vendorExtensions.hasOptionalFormParams}}
     * @param array|Options $options Optional Arguments
     {{/vendorExtensions.hasOptionalFormParams}}
     {{^vendorExtensions.hasOptionalFormParams}}
     {{#headerParams.0}}
     * @param array|Options $options Optional Arguments
     {{/headerParams.0}}
     {{/vendorExtensions.hasOptionalFormParams}}
     * @return {{apiName}}Instance Updated {{apiName}}Instance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update({{#requiredParams}}{{#isFormParam}}{{{dataType}}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/isFormParam}}{{/requiredParams}}{{#vendorExtensions.hasOptionalFormParams}}{{#vendorExtensions.hasRequiredFormParams}}, {{/vendorExtensions.hasRequiredFormParams}}array $options = []{{/vendorExtensions.hasOptionalFormParams}}{{^vendorExtensions.hasOptionalFormParams}}{{#headerParams.0}}, array $options = []{{/headerParams.0}}{{/vendorExtensions.hasOptionalFormParams}}): {{apiName}}Instance {
        return $this->proxy()->update({{#requiredParams}}{{#isFormParam}}${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/isFormParam}}{{/requiredParams}}{{#vendorExtensions.hasOptionalFormParams}}{{#vendorExtensions.hasRequiredFormParams}}, {{/vendorExtensions.hasRequiredFormParams}}$options{{/vendorExtensions.hasOptionalFormParams}}{{^vendorExtensions.hasOptionalFormParams}}{{#headerParams.0}}, $options{{/headerParams.0}}{{/vendorExtensions.hasOptionalFormParams}});
    }

{{/vendorExtensions.x-is-update-operation}}
{{/apiOperations}}
{{#apiOperations}}
    {{^vendorExtensions.x-is-create-operation}}
    {{^vendorExtensions.x-is-read-operation}}
    {{#vendorExtensions.importProperties}}
    /**
     * Access the {{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}
     */
    protected function get{{#lambda.titlecase}}{{mountName}}{{/lambda.titlecase}}(): {{filename}}List {
        return $this->proxy()->{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    }

    {{/vendorExtensions.importProperties}}
    {{/vendorExtensions.x-is-read-operation}}
    {{/vendorExtensions.x-is-create-operation}}
{{/apiOperations}}
    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get(string $name) {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }

        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->$method();
        }

        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string {
        {{#metaProperties.x-is-context-operation}}
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        {{/metaProperties.x-is-context-operation}}
        return '[Twilio.{{domainName}}.{{version}}.{{apiName}}Instance{{#metaProperties.x-is-context-operation}} ' . \implode(' ', $context) . '{{/metaProperties.x-is-context-operation}}]';
    }
}

{{/resources}}
