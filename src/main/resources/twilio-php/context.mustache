{{#resources}}
<?php

{{>licenseInfo}}

namespace Twilio\Rest\{{domainName}}\{{apiVersionClass}}{{namespaceSubPart}};

{{>imports}}

{{#apiOperations}}
{{^vendorExtensions.x-is-list-operation}}
    {{#vendorExtensions.importProperties.0}}
/**
    {{/vendorExtensions.importProperties.0}}
    {{#vendorExtensions.importProperties}}
 * @property {{filename}}List ${{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}
    {{#-last}}
    {{^vendorExtensions.importMethods}}
 */
    {{/vendorExtensions.importMethods}}
    {{/-last}}
    {{/vendorExtensions.importProperties}}
    {{#vendorExtensions.importMethods}}
    {{#-first}}
    {{^vendorExtensions.importProperties}}
/**
    {{/vendorExtensions.importProperties}}
    {{/-first}}
 * @method \Twilio\Rest\{{domainName}}\{{apiVersionClass}}\{{parent}}Context {{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}({{#params}}string ${{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/params}})
    {{#-last}}
 */
    {{/-last}}
    {{/vendorExtensions.importMethods}}
{{/vendorExtensions.x-is-list-operation}}
{{/apiOperations}}

class {{apiName}}Context extends InstanceContext {
    {{#apiOperations}}
    {{^vendorExtensions.x-is-list-operation}}
    {{#vendorExtensions.importProperties}}
    protected $_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    {{#-last}}

    {{/-last}}
    {{/vendorExtensions.importProperties}}
    {{/vendorExtensions.x-is-list-operation}}
    {{/apiOperations}}
    /**
     * Initialize the {{apiName}}Context
     *
     * @param Version $version Version that contains the resource
     {{#requiredPathParams}}
     * @param {{{dataType}}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} {{description}}
     {{/requiredPathParams}}
     */
    public function __construct(Version $version{{#requiredPathParams}}, ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} {{/requiredPathParams}}) {
        parent::__construct($version);

        // Path Solution
        $this->solution = [{{#requiredPathParams}}'{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}' => ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}},  {{/requiredPathParams}}];
        {{#metaProperties.x-is-context-operation}}

        $this->uri = '{{{apiContextPath}}}';
        {{/metaProperties.x-is-context-operation}}
    }

{{#apiOperations}}{{#vendorExtensions.x-is-context-operation}}{{>method}}
{{>contextMethod}}

{{/vendorExtensions.x-is-context-operation}}
{{^metaProperties.hasReadOperation}}
{{#vendorExtensions.x-is-create-operation}}{{>method}}
{{>contextMethod}}

{{/vendorExtensions.x-is-create-operation}}
{{/metaProperties.hasReadOperation}}
{{/apiOperations}}
    {{#apiOperations}}
    {{^vendorExtensions.x-is-list-operation}}
    {{#vendorExtensions.importProperties}}
    /**
     * Access the {{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}
     */
    protected function get{{#lambda.titlecase}}{{mountName}}{{/lambda.titlecase}}(): {{filename}}List {
        if (!$this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}) {
            $this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}} = new {{filename}}List(
                $this->version
                {{#requiredPathParams}}
                , $this->solution['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']
                {{/requiredPathParams}}
            );
        }

        return $this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    }

    {{/vendorExtensions.importProperties}}
    {{/vendorExtensions.x-is-list-operation}}
    {{/apiOperations}}
{{#apiOperations}}
    {{^vendorExtensions.x-is-list-operation}}
    {{#vendorExtensions.importProperties.0}}
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get(string $name): ListResource {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->$method();
        }

        throw new TwilioException('Unknown subresource ' . $name);
    }

    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call(string $name, array $arguments): InstanceContext {
        $property = $this->$name;
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }

        throw new TwilioException('Resource does not have a context');
    }

    {{/vendorExtensions.importProperties.0}}
    {{/vendorExtensions.x-is-list-operation}}
    {{/apiOperations}}
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.{{domainName}}.{{apiVersionClass}}.{{apiName}}Context ' . \implode(' ', $context) . ']';
    }
}
{{/resources}}
