{{#vendorExtensions.x-is-read-operation}}
    /**
     * Reads {{apiName}}Instance records from the API as a list.
     * Unlike stream(), this operation is eager and will load `limit` records into
     * memory before returning.
     *
     {{#queryParams.1}}
     * @param array|Options $options Optional Arguments
     {{/queryParams.1}}
     * @param int $limit Upper limit for the number of records to return. read()
     *                   guarantees to never return more than limit.  Default is no
     *                   limit
     * @param mixed $pageSize Number of records to fetch per request, when not set
     *                        will use the default value of 50 records.  If no
     *                        page_size is defined but a limit is defined, read()
     *                        will attempt to read the limit with the most
     *                        efficient page size, i.e. min(limit, 1000)
     * @return {{apiName}}Instance[] Array of results
     */
    public function read({{#queryParams.1}}array $options = [], {{/queryParams.1}}int $limit = null, $pageSize = null): array
    {
        return \iterator_to_array($this->stream({{#queryParams.1}}$options, {{/queryParams.1}}$limit, $pageSize), false);
    }

    /**
     * Streams {{apiName}}Instance records from the API as a generator stream.
     * This operation lazily loads records as efficiently as possible until the
     * limit
     * is reached.
     * The results are returned as a generator, so this operation is memory
     * efficient.
     *
     {{#queryParams.1}}
     * @param array|Options $options Optional Arguments
     {{/queryParams.1}}
     * @param int $limit Upper limit for the number of records to return. stream()
     *                   guarantees to never return more than limit.  Default is no
     *                   limit
     * @param mixed $pageSize Number of records to fetch per request, when not set
     *                        will use the default value of 50 records.  If no
     *                        page_size is defined but a limit is defined, stream()
     *                        will attempt to read the limit with the most
     *                        efficient page size, i.e. min(limit, 1000)
     * @return Stream stream of results
     */
    public function stream({{#queryParams.1}}array $options = [], {{/queryParams.1}}int $limit = null, $pageSize = null): Stream
    {
        $limits = $this->version->readLimits($limit, $pageSize);

        $page = $this->page({{#queryParams.1}}$options, {{/queryParams.1}}$limits['pageSize']);

        return $this->version->stream($page, $limits['limit'], $limits['pageLimit']);
    }

    /**
     * Retrieve a single page of {{apiName}}Instance records from the API.
     * Request is executed immediately
     *
     * @param mixed $pageSize Number of records to return, defaults to 50
     * @param string $pageToken PageToken provided by the API
     * @param mixed $pageNumber Page Number, this value is simply for client state
     * @return {{apiName}}Page Page of {{apiName}}Instance
     */
    public function page(
        {{#queryParams.1}}array $options = [],
        {{/queryParams.1}}$pageSize = Values::NONE,
        string $pageToken = Values::NONE,
        $pageNumber = Values::NONE
    ): {{apiName}}Page
    {
        {{#queryParams.1}}
        $options = new Values($options);
        {{/queryParams.1}}

        $params = Values::of([
            {{#vendorExtensions.optionFileParams}}
            {{^vendorExtensions.x-serialize}}
            '{{{baseName}}}' =>
                $options['{{paramName}}'],
            {{/vendorExtensions.x-serialize}}
            {{#vendorExtensions.x-serialize}}
            {{^vendorExtensions.x-serialize-map}}
            '{{{baseName}}}' =>
                {{vendorExtensions.x-serialize}}($options['{{paramName}}']),
            {{/vendorExtensions.x-serialize-map}}
            {{#vendorExtensions.x-serialize-map}}
            '{{{baseName}}}' =>
                {{vendorExtensions.x-serialize}}($options['{{paramName}}'], function ($e) { return $e; }),
            {{/vendorExtensions.x-serialize-map}}
            {{/vendorExtensions.x-serialize}}
            {{/vendorExtensions.optionFileParams}}
            'PageToken' => $pageToken,
            'Page' => $pageNumber,
            'PageSize' => $pageSize,
        ]);

        $response = $this->version->page('{{httpMethod}}', $this->uri, $params);

        return new {{apiName}}Page($this->version, $response, $this->solution);
    }

    /**
     * Retrieve a specific page of {{apiName}}Instance records from the API.
     * Request is executed immediately
     *
     * @param string $targetUrl API-generated URL for the requested results page
     * @return {{apiName}}Page Page of {{apiName}}Instance
     */
    public function getPage(string $targetUrl): {{apiName}}Page
    {
        $response = $this->version->getDomain()->getClient()->request(
            '{{httpMethod}}',
            $targetUrl
        );

        return new {{apiName}}Page($this->version, $response, $this->solution);
    }

{{/vendorExtensions.x-is-read-operation}}
