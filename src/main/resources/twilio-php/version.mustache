<?php
{{>licenseInfo}}
namespace Twilio\Rest\{{domainName}};

use Twilio\Domain;
use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
{{#isApiDomain}}
use Twilio\Rest\Api\V2010\AccountInstance;
{{/isApiDomain}}
{{#versionResources}}
{{^param}}
use Twilio\Rest\{{domainName}}\{{apiVersionClass}}\{{filename}}List;
{{/param}}
{{#param}}
use Twilio\Rest\{{domainName}}\{{apiVersionClass}}\{{importName}};
{{/param}}
{{/versionResources}}
use Twilio\Version;

/**
{{#versionResources}}
    {{^param}}
 * @property {{filename}}List ${{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}
    {{/param}}
    {{#param}}
 * @property {{importName}} ${{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}
    {{/param}}
{{/versionResources}}
{{#apiDependents}}
 * @property \Twilio\Rest\{{domainName}}\{{apiVersionClass}}\Account\{{filename}}List ${{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}
{{/apiDependents}}
{{#versionDependents}}
 * @method \Twilio\Rest\{{domainName}}\{{apiVersionClass}}\{{parent}}Context {{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}({{#params}}string ${{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/params}})
{{/versionDependents}}
 */

class {{apiVersionClass}} extends Version {
{{#versionResources}}
{{^param}}
    protected $_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
{{/param}}
{{#param}}
    protected $_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}} = null;
{{/param}}
{{/versionResources}}
{{#apiDependents}}
    protected $_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}} = null;
{{/apiDependents}}

    /**
     * Construct the {{apiVersionClass}} version of {{domainName}}
     *
     * @param Domain $domain Domain that contains the version
     */
    public function __construct(Domain $domain) {
        parent::__construct($domain);
        $this->version = '{{version}}';
    }

{{#versionResources}}
    {{^param}}
    protected function get{{mountName}}(): {{filename}}List {
        if (!$this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}) {
            $this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}} = new {{filename}}List($this);
        }
        return $this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    }

    {{/param}}
    {{#param}}
    /**
     * @return {{importName}} {{filename}} provided as the authenticating account
     */
    protected function get{{mountName}}(): {{importName}} {
        if (!$this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}}) {
            $this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}} = new {{importName}}(
                $this,
                $this->domain->getClient()->get{{param}}()
            );
        }
        return $this->_{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    }

    {{/param}}
{{/versionResources}}
{{#isApiDomain}}
    /**
     * Setter to override the primary account
     *
     * @param AccountContext|AccountInstance $account account to use as the primary
     *                                                account
     */
    public function setAccount($account): void {
        $this->_account = $account;
    }

{{/isApiDomain}}
{{#apiDependents}}
    protected function get{{mountName}}(): \Twilio\Rest\{{domainName}}\{{apiVersionClass}}\{{parent}}List {
        return $this->account->{{#lambda.camelcase}}{{mountName}}{{/lambda.camelcase}};
    }

{{/apiDependents}}
    /**
     * Magic getter to lazy load root resources
     *
     * @param string $name Resource to return
     * @return \Twilio\ListResource The requested resource
     * @throws TwilioException For unknown resource
     */
    public function __get(string $name) {
        $method = 'get' . \ucfirst($name);
        if (\method_exists($this, $method)) {
            return $this->$method();
        }

        throw new TwilioException('Unknown resource ' . $name);
    }

    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call(string $name, array $arguments): InstanceContext {
        $property = $this->$name;
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }

        throw new TwilioException('Resource does not have a context');
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string {
        return '[Twilio.{{domainName}}.{{apiVersionClass}}]';
    }
}