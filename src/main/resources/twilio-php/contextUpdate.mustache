{{#vendorExtensions.x-is-update-operation}}

    /**
    * Update the {{apiName}}Instance
    *
    {{#requiredParams}}
    {{#isFormParam}}
    * @param {{dataType}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} {{description}}
    {{/isFormParam}}
    {{/requiredParams}}
    {{#vendorExtensions.hasOptionalFormParams}}
    * @param array|Options $options Optional Arguments
    {{/vendorExtensions.hasOptionalFormParams}}
    * @return {{apiName}}Instance Updated {{apiName}}Instance
    * @throws TwilioException When an HTTP error occurs.
    */
    public function update({{#requiredParams}}{{#isFormParam}}{{dataType}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/isFormParam}}{{/requiredParams}}{{#vendorExtensions.hasOptionalFormParams}}{{#vendorExtensions.hasRequiredFormParams}}, {{/vendorExtensions.hasRequiredFormParams}}array $options = []{{/vendorExtensions.hasOptionalFormParams}}): {{apiName}}Instance {
        {{#vendorExtensions.hasOptionalFormParams}}
        $options = new Values($options);

        {{/vendorExtensions.hasOptionalFormParams}}
        $data = Values::of([
            {{#requiredParams}}
            {{#isFormParam}}
            {{^vendorExtensions.x-serialize}}
            '{{baseName}}' => ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}},
            {{/vendorExtensions.x-serialize}}
            {{#vendorExtensions.x-serialize}}
            {{^vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}(${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}),
            {{/vendorExtensions.x-serialize-map}}
            {{#vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}(${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}},function($e) { return $e; }),
            {{/vendorExtensions.x-serialize-map}}
            {{/vendorExtensions.x-serialize}}
            {{/isFormParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            {{#isFormParam}}
            {{^vendorExtensions.x-serialize}}
            '{{baseName}}' => $options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'],
            {{/vendorExtensions.x-serialize}}
            {{#vendorExtensions.x-serialize}}
            {{^vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']),
            {{/vendorExtensions.x-serialize-map}}
            {{#vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], function($e) { return $e; }),
            {{/vendorExtensions.x-serialize-map}}
            {{/vendorExtensions.x-serialize}}
            {{/isFormParam}}
            {{/optionalParams}}
        ]);
        {{#requiredParams}}
        {{#vendorExtensions.x-prefixed-collapsible-map}}
            $data = \array_merge($data, Serialize::prefixedCollapsibleMap($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], 'AddOns'));
        {{/vendorExtensions.x-prefixed-collapsible-map}}
        {{/requiredParams}}
        {{#optionalParams}}
        {{#vendorExtensions.x-prefixed-collapsible-map}}
            $data = \array_merge($data, Serialize::prefixedCollapsibleMap($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], 'AddOns'));
        {{/vendorExtensions.x-prefixed-collapsible-map}}
        {{/optionalParams}}

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new {{apiName}}Instance($this->version, $payload{{#optionalParams}}{{#isPathParam}}, $this->solution['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']{{/isPathParam}}{{/optionalParams}}{{#requiredParams}}{{#isPathParam}}, $this->solution['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']{{/isPathParam}}{{/requiredParams}});
    }
{{/vendorExtensions.x-is-update-operation}}