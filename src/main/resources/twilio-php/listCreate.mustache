{{#vendorExtensions.x-is-create-operation}}

    /**
     * Create the {{apiName}}Instance
     *
     {{#requiredParams}}
     {{#isFormParam}}
     * @param {{dataType}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} {{description}}
     {{/isFormParam}}
     {{/requiredParams}}
     {{#vendorExtensions.hasOptionalFormParams}}
     * @param array|Options $options Optional Arguments
     {{/vendorExtensions.hasOptionalFormParams}}
     * @return {{apiName}}Instance Created {{apiName}}Instance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function create({{#requiredParams}}{{#isFormParam}}{{dataType}} ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/isFormParam}}{{/requiredParams}}{{#vendorExtensions.hasOptionalFormParams}}{{#vendorExtensions.hasRequiredFormParams}}, {{/vendorExtensions.hasRequiredFormParams}}array $options = []{{/vendorExtensions.hasOptionalFormParams}}): {{apiName}}Instance {
        {{#vendorExtensions.hasOptionalFormParams}}
        $options = new Values($options);

        {{/vendorExtensions.hasOptionalFormParams}}

        $data = Values::of([
            {{#requiredParams}}
            {{^vendorExtensions.x-serialize}}
            '{{baseName}}' => ${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}},
            {{/vendorExtensions.x-serialize}}
            {{#vendorExtensions.x-serialize}}
            {{^vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}(${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}),
            {{/vendorExtensions.x-serialize-map}}
            {{#vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}(${{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}},function($e) { return $e; }),
            {{/vendorExtensions.x-serialize-map}}
            {{/vendorExtensions.x-serialize}}
            {{/requiredParams}}
            {{#optionalParams}}
            {{#isFormParam}}
            {{^vendorExtensions.x-serialize}}
            '{{baseName}}' => $options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'],
            {{/vendorExtensions.x-serialize}}
            {{#vendorExtensions.x-serialize}}
            {{^vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']),
            {{/vendorExtensions.x-serialize-map}}
            {{#vendorExtensions.x-serialize-map}}
            '{{baseName}}' => {{vendorExtensions.x-serialize}}($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], function($e) { return $e; }),
            {{/vendorExtensions.x-serialize-map}}
            {{/vendorExtensions.x-serialize}}
            {{/isFormParam}}
            {{/optionalParams}}
        ]);
        {{#headerParams.0}}
        $headers = Values::of([{{#headerParams}}"{{baseName}}" => $options["{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}"]{{^-last}}, {{/-last}}{{/headerParams}} ]);
        {{/headerParams.0}}
        {{#requiredParams}}
        {{#vendorExtensions.x-prefixed-collapsible-map}}
        $data = \array_merge($data, Serialize::prefixedCollapsibleMap($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], 'AddOns'));
        {{/vendorExtensions.x-prefixed-collapsible-map}}
        {{/requiredParams}}
        {{#optionalParams}}
        {{#isFormParam}}
        {{#vendorExtensions.x-prefixed-collapsible-map}}
        $data = \array_merge($data, Serialize::prefixedCollapsibleMap($options['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}'], 'AddOns'));
        {{/vendorExtensions.x-prefixed-collapsible-map}}
        {{/isFormParam}}
        {{/optionalParams}}

        $payload = $this->version->create('POST', $this->uri, [], $data {{#headerParams.0}} ,$headers {{/headerParams.0}});

        return new {{apiName}}Instance(
            $this->version,
            $payload
            {{#optionalParams}}
            {{#isPathParam}}
            , $this->solution['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']
            {{/isPathParam}}
            {{/optionalParams}}
            {{#requiredParams}}
            {{#isPathParam}}
            , $this->solution['{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}']
            {{/isPathParam}}
            {{/requiredParams}}
        );
    }
{{/vendorExtensions.x-is-create-operation}}
