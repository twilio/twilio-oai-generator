package com.twilio.oai.java.feature.constructor;

import com.google.common.collect.Lists;
import com.twilio.oai.StringHelper;
import com.twilio.oai.java.cache.ResourceCacheContext;
import org.openapitools.codegen.CodegenOperation;
import org.openapitools.codegen.CodegenParameter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static com.twilio.oai.api.JavaApiResourceBuilder.SIGNATURE_LIST;
import static com.twilio.oai.common.ApplicationConstants.ACCOUNT_SID_VEND_EXT;
import static com.twilio.oai.common.ApplicationConstants.DOT;

public class JsonConstructorGenerator extends ConstructorGenerator {

    @Override
    public void apply(CodegenOperation codegenOperation) {
        // This method is intentionally left empty as the JSON constructor does not require any specific processing.
        // The JSON constructor is automatically generated by the OpenAPI generator.
        codegenOperation.vendorExtensions.put("x-java-constructor", true);

        List<List<CodegenParameter>> constructors = generateSignatureListModern(codegenOperation);
        
        codegenOperation.vendorExtensions.put(SIGNATURE_LIST, generateSignatureListModern(codegenOperation));
        
    }

    @Override
    public boolean shouldApply(CodegenOperation codegenOperation) {
        if (codegenOperation.consumes == null || codegenOperation.consumes.isEmpty()) {
            return false;
        }
        boolean shouldApply =  codegenOperation.consumes.stream()
                .anyMatch(mediaType -> mediaType.get("mediaType").equals("application/json"));
        return shouldApply;
    }

    public List<List<CodegenParameter>> generateSignatureListModern(final CodegenOperation codegenOperation) {
        List<CodegenParameter> requiredParams = codegenOperation.requiredParams;
        // This is required because requiredParams are not resolved.
        //applyDataTypeToBodyParams(requiredParams);
        CodegenParameter accountSidParam = null;
        Optional<CodegenParameter> optionalParam = codegenOperation.pathParams.stream()
                .filter(param -> param.vendorExtensions.containsKey(ACCOUNT_SID_VEND_EXT)).findAny();
        if(optionalParam.isPresent()){
            accountSidParam = optionalParam.get();
        }

        List<List<CodegenParameter>> conditionalParameterDoubleList = getConditionalParameters(codegenOperation);
        conditionalParameterDoubleList = Lists.cartesianProduct(conditionalParameterDoubleList);
        // conditionalParameterDoubleList contains list of constructors only from conditional parameters
        // We need to filter out similar constructors.
        List<List<CodegenParameter>> filteredConditionalCodegenParam = filterConditionalParametersByDatatype(conditionalParameterDoubleList);

        // Combine required and conditional parameters to form the signature list
        List<List<CodegenParameter>> signatureList = new ArrayList<>();
        for(List<CodegenParameter> paramList : filteredConditionalCodegenParam){
            signatureList.add(addAllToList(codegenOperation.requiredParams, paramList));
            if( accountSidParam != null) {
                signatureList.add(addAllToList(List.of(accountSidParam), requiredParams, paramList));
            }
        }
        return signatureList;
    }

    private void applyDataTypeToBodyParams(List<CodegenParameter> requiredParams) {
        requiredParams.forEach(param -> {
                if (param.isBodyParam) {
                    param.dataType = ResourceCacheContext.get().getResourceName() + DOT + param.dataType;
                }
        });
    }


    public void lookForConditionalParameterInBody(List<List<String>> conditionalParamDoubleList,
                                                  List<List<CodegenParameter>> conditionalCodegenParam, CodegenOperation codegenOperation) {
//        conditionalParamDoubleList.stream().map(
//                paramList -> paramList.stream().map(
//                        cp -> codegenOperation.bodyParams.get(0).filter(
//                                op -> op.name.equals(StringHelper.camelize(cp, true))
//                        ).findAny().get()
//                ).collect(Collectors.toList())).collect(Collectors.toList());
    }

    private <T> List<T> addAllToList(List<T>... lists) {
        return Arrays.stream(lists).flatMap(List::stream).collect(Collectors.toList());
    }
}
