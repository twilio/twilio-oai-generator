package com.twilio.oai.java.feature.constructor;

import com.google.common.collect.Lists;
import com.twilio.oai.StringHelper;
import com.twilio.oai.java.cache.ResourceCacheContext;
import org.openapitools.codegen.CodegenOperation;
import org.openapitools.codegen.CodegenParameter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static com.twilio.oai.api.JavaApiResourceBuilder.SIGNATURE_LIST;
import static com.twilio.oai.common.ApplicationConstants.ACCOUNT_SID_VEND_EXT;
import static com.twilio.oai.common.ApplicationConstants.DOT;

public class JsonConstructorGenerator extends ConstructorGenerator {

    @Override
    public void apply(CodegenOperation codegenOperation) {
        // This method is intentionally left empty as the JSON constructor does not require any specific processing.
        // The JSON constructor is automatically generated by the OpenAPI generator.
        codegenOperation.vendorExtensions.put("x-java-constructor", true);

        List<List<CodegenParameter>> constructors = generateSignatureListModern(codegenOperation);
        
        codegenOperation.vendorExtensions.put(SIGNATURE_LIST, constructors);
        
    }

    @Override
    public boolean shouldApply(CodegenOperation codegenOperation) {
        if (codegenOperation.consumes == null || codegenOperation.consumes.isEmpty()) {
            return false;
        }
        boolean shouldApply =  codegenOperation.consumes.stream()
                .anyMatch(mediaType -> mediaType.get("mediaType").equals("application/json"));
        return shouldApply;
    }

    public List<List<CodegenParameter>> generateSignatureListModern(final CodegenOperation codegenOperation) {
        // Step 1
        List<CodegenParameter> requiredParams = getRequiredParameters(codegenOperation);
        // Step 2
        CodegenParameter accountSidParam = getAccountSidParameter(codegenOperation);
        // Step 3
        List<List<CodegenParameter>> listOfConstructors =  combineParameters(requiredParams, accountSidParam);
        return listOfConstructors;
    }

    private List<CodegenParameter> getRequiredParameters(CodegenOperation codegenOperation) {
        List<CodegenParameter> requiredParams;
        requiredParams = codegenOperation.pathParams.stream()
                .filter(param -> !param.vendorExtensions.containsKey(ACCOUNT_SID_VEND_EXT))
                .collect(Collectors.toList());
        requiredParams.addAll(codegenOperation.queryParams.stream()
                .filter(param -> param.required)
                .collect(Collectors.toList()));
        requiredParams.addAll(codegenOperation.bodyParams.stream()
                .filter(param -> param.required)
                .collect(Collectors.toList()));
        requiredParams.addAll(codegenOperation.headerParams.stream()
                .filter(param -> param.required)
                .collect(Collectors.toList()));
        return requiredParams;
    }

    private CodegenParameter getAccountSidParameter(CodegenOperation codegenOperation) {
        return codegenOperation.pathParams.stream()
                .filter(param -> param.vendorExtensions.containsKey(ACCOUNT_SID_VEND_EXT))
                .findAny()
                .orElse(null);
    }
    private List<List<CodegenParameter>> combineParameters(List<CodegenParameter> requiredParams, CodegenParameter accountSidParam) {
        List<List<CodegenParameter>> signatureList = new ArrayList<>();
        signatureList.add(addAllToList(requiredParams));
        if (accountSidParam != null) {
            signatureList.add(addAllToList(List.of(accountSidParam), requiredParams));
        }
        return signatureList;
    }


    public List<List<CodegenParameter>> lookForConditionalParameterInBody(List<List<String>> conditionalParamDoubleList, CodegenOperation codegenOperation) {
        return new ArrayList<>();
    }

    private <T> List<T> addAllToList(List<T>... lists) {
        return Arrays.stream(lists).flatMap(List::stream).collect(Collectors.toList());
    }
}
